#LyX 1.5.1 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{hyperref}

\let\myUrl\url
\renewcommand{\url}[1]{(\myUrl{#1})}
\end_preamble
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\noindent
\align center

\color none
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename images/conman_cover.pdf
	width 75page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Title
ConMan
\end_layout

\begin_layout Author
© California Institute of Technology
\newline
Scott King
\newline
Version 2.0
\end_layout

\begin_layout Date
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
raggedbottom
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Chapter
Preface
\end_layout

\begin_layout Section
Abstract
\end_layout

\begin_layout Standard
This documents serves as a users’ guide for ConMan, a vectorized finite
 element program for the solution of the equations of incompressible, infinite-P
randtl number convection in twodimensions written by Arthur Raefsky and
 Scott King at Caltech.
 ConMan is a public domain program and is distributed free of charge to
 anyone who wishes to use it and may be freely copied and modified.
 ConMan is written in Standard Fortran 77 and runs under Unix and Unicos
 operating systems.
 Porting it to other systems should be straightforward.
 As with anything free it comes with no guarantees, but it has been benchmarked
 against other existing codes.
 The authors would appreciate any information regarding bugs or potential
 problems but make no promises regarding the timeliness of changes or fixes.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This manual contains all of the necessary information for setting up input
 and running ConMan.
 It assumes some familiarity with the finite element method and Fortran.
 An excellent reference book for more detail on the finite element method
 is 
\emph on
The finite element method
\emph default
 by T.J.R.
 Hughes.
 All of the data structures and bookkeeping arrays in ConMan follow the
 conventions in Hughes so for the person who wishes to make extensive use
 of ConMan this book is a worthwhile investment.
 
\end_layout

\begin_layout Standard
This manual is broken up into several parts: it begins with a brief introduction
 to the finite element method and the notation used through out the manual
 and ConMan.
 There is a discussion of the equations solved and the material properties
 including how and where to modify the code.
 There is also discussion of the vectorization strategy and finally a descriptio
n of all the input variables.
 Within this document the following convention will be followed: subroutine
 names from ConMan will be given in 
\series bold
bold
\series default
 type, variables from ConMan will be given in 
\emph on
italicized
\emph default
 type and important points or potential traps will be noted with 
\end_layout

\begin_layout Standard
! This is an important point 
\end_layout

\begin_layout Standard
Questions and problems can be addressed to Scott King at e-mail: scott@jsun.ucsd.e
du mail: IGPP 0225 Scripps Inst.
 Oceanography La Jolla, CA 92093 e-mail probably has the quickest response.
\end_layout

\begin_layout Section
Citation
\end_layout

\begin_layout Standard
Computational Infrastructure for Geodynamics (CIG) is making this source
 code available to you in the hope that the software will enhance your research
 in geophysics.
 The underlying C code for the finite element package was donated to CIG
 in July of 2005.
 A number of individuals have contributed a significant portion of their
 careers toward the development of ConMan.
 It is essential that you recognize these individuals in the normal scientific
 practice by making appropriate acknowledgements.
 
\end_layout

\begin_layout Standard
The code is based on the method described in 
\end_layout

\begin_layout Itemize
Moresi, L.N., F.
 Dufour, and H.-B.
 Mühlhaus (2003), A Lagrangian integration point finite element method for
 large deformation modeling of viscoelastic geomaterials, 
\emph on
J.
 Comp.
 Phys., 184
\series bold
,
\series default
\emph default
 476-497.
 
\end_layout

\begin_layout Standard
The code was originally developed by the Victorian Partnership for Advanced
 Computing (VPAC) and Louis Moresi's group at Monash University.
 Walter Landry of CIG and Luke Hodkinson of VPAC have enhanced the code
 to satisfy the requirements of the long-term tectonics community.
 Roger Buck, Gus Correa, and Robert Bialas from the Lamont-Doherty Earth
 Observatory, Columbia University, provided valuable user testing.
 The ConMan team requests that in your oral presentations and in your papers
 that you indicate your use of this code and acknowledge the authors of
 the code, 
\begin_inset LatexCommand htmlurl
name "CIG"
target "www.geodynamics.org"

\end_inset

, 
\begin_inset LatexCommand htmlurl
name "Victoria Partnership for Advanced Computing"
target "www.vpac.org"

\end_inset

, and 
\begin_inset LatexCommand htmlurl
name "Monash University"
target "www.monash.edu"

\end_inset

.
\end_layout

\begin_layout Section
Support
\end_layout

\begin_layout Standard
ConMan development is supported by a grant from the National Science Foundation
 to CIG, managed by the California Institute of Technology, under Grant
 No.
 EAR-0406751.
 However, most of the software components below ConMan have been developed
 by the Victoria Partnership for Advanced Computing (VPAC) and Monash University.
 Some of the support for VPAC has come from subawards from CIG.
\end_layout

\begin_layout Standard
Any opinions, findings, and conclusions or recommendations expressed in
 this material are those of the authors and do not necessarily reflect the
 views of the National Science Foundation.
 
\end_layout

\begin_layout Chapter
Computational Approach and Governing Equations
\end_layout

\begin_layout Section
The Finite Element Method
\end_layout

\begin_layout Standard
In general, the finite element method takes a differential equation (strong
 form) and transforms it into an integral equation (weak form).
 For example, the strong form of this simple equation is stated as follows:
\end_layout

\begin_layout Standard
Given 
\begin_inset Formula $f\left(x\right):\left[0,1\right]$
\end_inset

 
\begin_inset Formula $\rightarrow\Re$
\end_inset

 and constants 
\emph on
g
\emph default
 and 
\emph on
h
\emph default
, find 
\begin_inset Formula $u:\left[0,1\right]\rightarrow\Re$
\end_inset

, such that
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
u,_{xx}\left(x\right)+f\left(x\right)=0\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
u\left(1\right)=g\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
-u,_{x}\left(0\right)=h\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The weak form of the corresponding boundary value problem is stated: 
\end_layout

\begin_layout Standard
Given 
\emph on
f
\emph default
, 
\emph on
g
\emph default
 and 
\emph on
h
\emph default
, as before.
 Find 
\begin_inset Formula $u\left(x\right)\epsilon\mathcal{L}$
\end_inset

 such that for all 
\begin_inset Formula $w\left(x\right)\epsilon V$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\intop_{0}^{1}w,_{x}\left(x\right)u,_{x}\left(x\right)=\intop_{0}^{1}w\left(x\right)f\left(x\right)dx+w\left(0\right)h\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $V$
\end_inset

 is the set of weighting functions defined by 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
V=\left\{ w\left(x\right)|w\left(x\right)\epsilon H^{1},\, w\left(1\right)=0\right\} \label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and 
\begin_inset Formula $\mathcal{L}$
\end_inset

 is a set of trial solutions defined by 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\mathcal{L=\left\{ \mathrm{\mathit{u\left(x\right)|u\left(x\right)}\epsilon H^{1},\,\mathit{u}\left(1\right)=\mathit{g}}\right\} }\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $H^{1}$
\end_inset

 is the set of all functions whose first derivatives are square integrable
 on [0, 1].
 The integral equation is then solved by integrating over each element in
 the domain and adding the result.
 The result is a large sparse matrix equation of the form 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\left[K\right]x=b\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\emph on
[K]
\emph default
 is referred to as the element stiffness matrix.
 There will be more to say about the implementation in Section 4.
 
\end_layout

\begin_layout Standard
There are two domains to keep in mind when thinking about the finite element
 method: the global domain and the parent element domain (Figure 
\begin_inset LatexCommand ref
reference "fig:Figure-1"

\end_inset

).
 All calculations are done in the parent element domain and the results
 are assembled into the global equations.
 This means all calculations can be done for a single parent element.
 Elements of different sizes or shapes filling an irregular global domain
 geometry (i.e., non-rectangular) can be solved by the same program.
 The only difference between these elements is the Jacobian of the transformatio
n between the input domain and the parent element domain, which is calculated
 in routine 
\series bold
genshg
\series default
.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Figure-1"

\end_inset

The mapping between the global domain (right) and the parent element domain
 (left) using the shape functions.
 Figure taken from Hughes, Sec 3.2.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/conman-fig1.png
	scale 45

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For ConMan the choice was made to use bilinear quadrilaterals as the parent
 elements (Figure 
\begin_inset LatexCommand ref
reference "fig:Figure-2"

\end_inset

).
 Higher order elements (i.e., biquadratic or bicubic-spline) require more
 computational work per element.
 It has been our experience that using grid refinement, rather than using
 high-order elements, is the best strategy for an efficient, accurate code
 for incompressible, advection-diffusion problems.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
The bilinear shape function for a single element (top) and the four elements
 whose shape functions combine to form the global shape function for node
 A (bottom).
 Figure taken from Hughes, Sec 3.2.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/conman-fig2.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because of the changing between domains, it is necessary to define several
 bookkeeping arrays to identify nodes and elements in each of the domains.
 
\end_layout

\begin_layout Description
id transforms global nodes to equation numbers (Figure 
\begin_inset LatexCommand ref
reference "fig:Example-relationship-between"

\end_inset

).
 
\end_layout

\begin_layout Description
ien transforms element local node numbers to global node numbers (Figure
 4).
 
\end_layout

\begin_layout Description
lm transforms element local node numbers to global equation numbers.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Example-relationship-between"

\end_inset

 Example relationship between global nodes and equation numbers for a 2
 degree of freedom problem using the id array.
 An equation number of zero denotes a boundary condition.
 Figure taken from Hughes, Sec 3.2.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/conman-fig3.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With these the code is able to go back and forth between the parent element
 domain and the global domain.
 Global node numbering is specified by the user, and equation numbers are
 assigned by the code to denote the row in the stiffness matrix corresponding
 to the degree(s) of freedom for that node.
 One global node may have more than one equation number (since there may
 be more than one degree of freedom per node).
 Boundary conditions are specified with a zero equation number.
 Since it is a sparse matrix, it is desirable to permute the stiffness matrix
 for computational efficiency.
 These arrays spare the user from dealing with the transformations, while
 making the code efficient.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Example relationship between global node numbers and local element numbers
 using the ien array.
 Local nodes are numbered counterclockwise from the bottom left hand corner.
 Figure taken from Hughes, Sec 3.2.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/conman-fig4.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the code the data structures for these two arrays are 
\end_layout

\begin_layout Description

\family roman
id ( degree-of-freedom , global-node-number ) = equation-number 
\end_layout

\begin_layout Description

\family roman
ien ( local-node-number, element-number ) = global-node-number 
\end_layout

\begin_layout Description

\family roman
lm ( degree-of-freedom, local-node-number, element-number ) = global-equationnum
ber 
\end_layout

\begin_layout Subsection
Equations
\end_layout

\begin_layout Standard
The equations for incompressible convection (in dimensionless form) are
 the equations of momentum
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\nabla^{2}u=-\nabla p+Ra\theta\hat{k}\label{eq:momentum}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
continuity 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\nabla\cdot u=0\label{eq:continuity}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and energy 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula \[
\frac{\partial\theta}{\partial t}=u\cdot\nabla\theta+\nabla^{2}\theta+H\]

\end_inset


\end_layout

\begin_layout Standard
where 
\emph on
u
\emph default
 is the dimensionless velocity, 
\begin_inset Formula $\theta$
\end_inset

 is the dimensionless temperature, 
\emph on
p
\emph default
 is the dimensionless pressure, 
\begin_inset Formula $\hat{k}$
\end_inset

 is the unit vector in the vertical direction, 
\emph on
H
\emph default
 is the heat source term and 
\emph on
t
\emph default
 is the dimensionless time.
 In this form all the material properties are combined into one dimensionless
 parameter, the Rayleigh number, given by 
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Ra=\frac{g\alpha\Delta Td^{3}}{\kappa\mu}\]

\end_inset


\end_layout

\begin_layout Standard
where 
\emph on
g
\emph default
 is the acceleration due to gravity, 
\begin_inset Formula $\alpha$
\end_inset

 is the coefficient of thermal expansion, 
\begin_inset Formula $\Delta T$
\end_inset

 is the temperature drop across the box, 
\emph on
d
\emph default
 is the depth of the box, 
\begin_inset Formula $\kappa$
\end_inset

 is the thermal diffusivity, and 
\emph on
µ 
\emph default
is the dynamic viscosity.
\end_layout

\begin_layout Standard
The momentum and energy equations form a simple coupled system of differential
 equations.
 We treat the incompressibility equation as a constraint on the momentum
 equation and enforce incompressibility in the solution of the momentum
 equation using a penalty formulation described below.
 Since the temperatures provide the buoyancy (body force) to drive the momentum
 equation and since there is no time-dependence in the momentum equation,
 the algorithm to solve the system is a simple one: Given an initial temperature
 field, calculate the resulting velocity field.
 Use the velocities to advect the temperatures for the next time step and
 solve for a new temperature field.
 If the time stepping for the temperature equation is stable, then this
 method is stable and converges as !t " 0.
 The momentum equation is solved using the penalty method to enforce incompressi
bility.
 The formal statement of the problem is as follows: Given: f:" " #n body
 force vector g: #g " #n imposed velocity vector h: #h " #n imposed traction
 vector ¯ #g ' #h = # #g ( #h = $ where # is the boundary of the domain
 ".
 #g and #h are the parts of the boundary where velocities and tractions
 are specified.
 Find u : " " #n and p : " " # tij,j + fi = 0 on " ui,i = 0 on " ui = gi
 on #g tijnj = hi on #h with the constitutive equation for a Newtonian fluid
 tij = −p%ij + 2µu(i,j) where tij denotes the Cauchy stress tensor, p is
 the pressure, %ij is the Kronecker delta and u(i,j) = (ui,j + uj,i)/2.
 In the penalty formulation, the above is replaced by t(!) ij = −p(!)%ij
 + 2µu(!) (i,j) where p(!) = −&u(!) i,i and & is the penalty parameter (repeated
 subscripts means summation over all indices).
\end_layout

\begin_layout Standard
This formulation automatically enforces incompressibility since the solution
 converges to the incompressible stokes equation as & approaches infinity
 (Temam, 1977).
 Also, the unknown pressure field is eliminated.
 This is quite useful not only because the amount of computational work
 is decreased because no pressure equation is solved, but also because it
 eliminates the need to create artificial boundary conditions for the pressure
 equation.
 There are no pressure boundary conditions in the formal specification of
 the problem.
 By examining the equation we see that the role of pressure is to balance
 the system, so physically the penalty formulation makes sense.
 The equation is cast in the weak form and the Galerkin formulation (i.e.
 the weighting functions are the same as the basis functions) is used to
 solve the weak form of the equation.
 V = {w ' H1 | w = 0 on #g} V is the set of all weighting functions w which
 vanish on the boundary.
 Similarly V h is a subset of V parameterized by h, the mesh parameter.
 Let gh denote an approximation of g which converges to g as h " 0.
 Find uh = wh + gh, wh ' V h, such that for all ¯ wh ' V h !! (&wj,j ¯ wi,i
 + 2µwi,j ¯ wi,j) d" = !! fi ¯ wh i d" + !"h hi ¯ wh i d" − !! "&gh j,j
 ¯ wi,i + 2µgh (i,j) ¯ wh (i,j)#d" wh i = $NAuiA uiA = ui (xA) where NA
 is the shape function for node A for the element.
 The element stiffness matrix (Figure 5) is made up of the two terms from
 the left hand side of the integral equation.
 The integration is done using two by two gauss quadrature, which is exact
 when the elements are rectangular and bilinear shape functions are used.
 The & term is under-integrated (one point rule) to keep the large penalty
 value from effectively locking the element (Malkus and Hughes, 1978).
 The right hand side is made up of three known parts, the body force term
 ( fi ), the applied tractions ( hi ) and the applied velocities ( gi ).
 The momentum equation is equivalent to an incompressible elastic problem,
 and the resulting stiffness matrix will always be positive definite (Hughes,
 1986 p.
 84-89).
 This allows us to consider only the upper triangular part of the stiffness
 matrix and save both storage and operations using Cholesky factorization.
 More details of the method and a formal error analysis can be found in
 Hughes, Liu and Brooks (1979).
 The stiffness matrix is formed in routine f vstf and the right hand side
 is formed in routine f tres.
\end_layout

\begin_layout Standard
The energy equation is an advection-diffusion equation.
 The formal statement is Find T : " " R such that ˙ T + uiT,i = $T,ii +
 H on " T = b on #b T,jnj = q on #q where T is the temperature, ui is the
 velocity, $ is the thermal diffusivity and H is the internal heat source.
 The weak form of the energy equation is given by !! (w + p) ˙ T d" = −!!
 (w + p) (uiT,i) d" − $ !! w,iT,i d" + !"q w T,jnj d#q where ˙ T is the
 time derivative of temperature, T,i is the gradient of temperature, w is
 the standard weighting function and (w + p) is the Petrov-Galerkin weighting
 function with p, the discontinuous streamline upwind part of the Petrov-Galerki
n weighting function, given by p = (u&T = ˜k uiw,i ||u||2 The energy equation
 is solved using Petrov-Galerkin weighting functions on the internal heat
 source and advective terms to correct for the under-diffusion and remove
 the oscillations which would result from the standard Galerkin method for
 an advection dominated problem (Hughes and Brooks, 1977).
 The Petrov-Galerkin function can be thought of as a standard Galerkin method
 in which we counterbalance the numerical underdiffusion by adding an artificial
 diffusivity of the form ()u"h" + *u#h#) /2 with ) = 1 − 2$ u"h" * = 1 −
 2$ u#h# where h" and h# are the element lengths and u" and u# are the velocitie
s in the local element coordinate system () * system) evaluated at the element
 center.
 This form of discretization has no crosswind diffusion because the “artificial
 diffusion” acts only in the direction of the flow (i.e.
 it follows the streamline), hence the name Streamline Upwind Petrov-Galerkin
 (SUPG).
 This makes it a better approximation than straight upwinding and it has
 been demonstrated to be more accurate than Galerkin or straight upwinding
 in advection dominated problems (Hughes and Brooks, 1977).
 It has recently been shown that the SUPG method is one of a broader class
 of methods for advection-diffusion equations referred to as Galerkin/Least-Squa
res methods (Hughes et al., 1988).
\end_layout

\begin_layout Standard
The resulting matrix equation is not symmetric, but since the energy equation
 only has one degree of freedom per node, while the momentum equation has
 two or three, the storage for the energy equation is small compared to
 the momentum equation.
 Since we use an explicit time stepping method, the energy equation is not
 implemented in matrix form.
 The added cost of calculating the Petrov-Galerkin weighting functions is
 much less than the cost of using a refined grid with the Galerkin method.
 The Galerkin method requires a finer grid then the Petrov-Galerkin method
 to achieve stable solutions (Travis et al., 1989).
 Time stepping in the energy equation is done using an explicit predictor-correc
tor algorithm.
 The form of the predictor-corrector algorithm is Predict: T(0) n+1 = Tn
 + !t(1 − #) ˙ Tn ˙ T(0) n+1 = 0 Solve: M!! ˙ T(i) n+1 = R(i) n+1 R(i) n+1
 = − %˙ T(i) n+1 + u · (T(i) n+1),x &(w + p) − ˜k w,x(T(i) n+1),x + (boundary
 condition terms) Correct: T(i+1) n+1 = T(i) n+1 + !t# ˙ T(i) n+1 ˙ T(i+1)
 n+1 = ˙ T(i) n+1 + ! ˙ T(i) n+1 where i is the iteration number (for the
 corrector), n is the time step number, T is the temperature, ˙ T is the
 derivative of temperature with time, ! ˙ T is the correction to the temperature
 derivative for the iteration, M! is the lumped mass matrix, R(i) n+1 is
 the residual term, !t is the time step and # is a convergence parameter.
 Note that in the explicit formulation M! is diagonal.
 The time step is dynamically chosen, and corresponds to the Courant time
 step (the largest step that can be taken explicitly and maintain stability).
 With the appropriate choice of variables, # = 0.5 and two iterations, the
 method is second order accurate (Hughes, 1986, p.562-566).
 The predict step is done in routine timdrv, the residual R is formed in
 routine f tres, M! is formed in routine tmass and the correct step is also
 done in f tres.
\end_layout

\begin_layout Chapter
Implementation
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
ConMan was designed to take advantage of machines capable of vector instructions.
 Hence thoughout the code, operations which would be performed on an individual
 element on a scalar machine are grouped together so that they can be performed
 on a group of elements.
 This is transparent to the user and requires only a small modification
 to the program style and data structure.
 The only unfortunate side effect of this operation is that the arrays of
 element quantities (e.g.
 ien, lm, evisc ) are now shuffled to avoid vector recurrences.
 Consider Figure 6, a small rectangular grid with one degree of freedom
 per node.
 When assembling the equation for global degree of freedom 5 (marked N),
 there is a contribution from elements 1, 2, 3 and 4 (circled).
 This is updated as follows:
\end_layout

\begin_layout LyX-Code
DO E=1,NUMEL 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
(localize data) 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
(form local stiffness matrix in LOCAL)
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
DO N=1,4 
\end_layout

\begin_layout LyX-Code
GLOBAL( LM(E,N) ) = GLOBAL( LM(E,N) ) + LOCAL(N) 
\end_layout

\begin_layout LyX-Code
ENDDO 
\end_layout

\begin_layout LyX-Code
ENDDO
\end_layout

\begin_layout Standard
where E is the element number, N is the local node number, LOCAL(N) is the
 value being assembled for element E and local node N and GLOBAL is the
 equation for the global node.
 Now the task is to assemble m elements, e1, · · · , em, at one time, making
 sure that no global node is updated twice.
 This can be accomplished if for all elements, e1, · · · , em, lm(ea,n)
 is not equal to lm(eb,n) for ea and eb in e1, · · · , em.
 Also since the innermost loops are the vectorizable loops, we unroll the
 N loop over the local nodes.
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
\end_layout

\begin_layout LyX-Code
(loop over all blocks) 
\end_layout

\begin_layout LyX-Code
.
\end_layout

\begin_layout LyX-Code
.
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
(localize a block of data)
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
(form a block of local stiffness matrices in LOCAL) 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
DO IV=1,NVEC 
\end_layout

\begin_layout LyX-Code
IVEL=IV+IEL-1 
\end_layout

\begin_layout LyX-Code
GLOBAL( LM(IVEL,1) ) = GLOBAL( LM(IVEL,1) ) + LOCAL(IV,1) 
\end_layout

\begin_layout LyX-Code
GLOBAL( LM(IVEL,2) ) = GLOBAL( LM(IVEL,2) ) + LOCAL(IV,2) 
\end_layout

\begin_layout LyX-Code
GLOBAL( LM(IVEL,3) ) = GLOBAL( LM(IVEL,3) ) + LOCAL(IV,3) 
\end_layout

\begin_layout LyX-Code
GLOBAL( LM(IVEL,4) ) = GLOBAL( LM(IVEL,4) ) + LOCAL(IV,4) 
\end_layout

\begin_layout LyX-Code
ENDDO
\end_layout

\begin_layout Standard
NVEC elements at a time can be processed, and the array LOCAL must be of
 length NVEC by 4.
 Notice that the NUMEL elements have been broken up into groups NVEC long
 with IEL marking the first element in the group (see Figure 7).
 The shuffling of the elements is done in routine genshp, and the variables
 in the code (iel, nvec, iv, ivel) are the same as described above.
 
\end_layout

\begin_layout Standard
Figure 6.
 The four surrounding elements (1, 2, 3 and 4 circled) all contribute to
 the global equation 5.
\end_layout

\begin_layout Standard
Figure 7.
 A representation of the storage of array LM, which is NUMEL by 4 long.
 The NUMEL elements are broken up into groups of length NVEC for vector
 processing ! In common.h the parameter lvec sets the maximum length of the
 vectors.
 It is usually wise to set this to the length of the vector registers on
 the machine (64 for Cray, 128 for Convex).
 ! If a length greater than 128 is used, then the size of the commons temp1
 and tempx must be changed in routine flow.
 The element stiffness matrix for the stokes equation is always upper triangular.
 Since NVEC matrices at a time are formed, to save storage only the upper
 triangular part is stored (36 entries instead of 64 for 8 by 8 matrix).
 The numbering scheme for the storage is shown in Figure 8.
\end_layout

\begin_layout Standard
STOPPED HERE
\end_layout

\begin_layout Section
Binaries
\end_layout

\begin_layout Standard
If you do not need to run on parallel machines, the easiest way to install
 ConMan is to download binaries for your platform from the 
\begin_inset LatexCommand htmlurl
name "ConMan web page"
target "geodynamics.org/cig/software/packages/mc/conman/"

\end_inset

.
 Then you can run ConMan from the command line or DOS prompt.
 CIG provides binaries for Linux, Mac OS X (10.4 or greater), and Windows
 (2000 and XP).
\end_layout

\begin_layout Section
Building from Source
\end_layout

\begin_layout Standard
Read this only if the binaries are not sufficient for you.
 
\end_layout

\begin_layout Subsection
System Requirements
\end_layout

\begin_layout Standard
ConMan works on a variety of computational platforms and has been tested
 on workstations running 
\end_layout

\begin_layout Itemize
Mac OS X 10.4.6 (G4, G5, and Intel)
\end_layout

\begin_layout Itemize
Windows 2000 and XP SP2
\end_layout

\begin_layout Itemize
RedHat Fedora Core 5 (x86)
\end_layout

\begin_layout Itemize
OpenSuse 10.0 (x86)
\end_layout

\begin_layout Itemize
Gentoo (x86)
\end_layout

\begin_layout Itemize
Debian stable (x86 and AMD64), testing (x86), and unstable (x86)
\end_layout

\begin_layout Standard
ConMan has also been tested on clusters running Redhat 7.2 (x86) and RedHat
 Enterprise Linux 3 (EM64T).
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
In order to build ConMan, you must have the headers and development libraries
 for
\end_layout

\begin_layout Itemize
MPI
\end_layout

\begin_layout Itemize
PETSc 2.3.2
\end_layout

\begin_layout Itemize
libxml2
\end_layout

\begin_layout Standard
You must also have python 2.2.1 or greater installed.
 If you do not already have MPI, then in many cases PETSc can install a
 version for you.
 Installing PETSc also requires a Blas/Lapack implementation.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sec:Downloading-the-Code"

\end_inset

Downloading the Code
\end_layout

\begin_layout Standard
You can get the source for the latest release from the 
\begin_inset LatexCommand htmlurl
name "Gale website"
target "geodynamics.org/cig/software/packages/long/gale/"

\end_inset

.
 In that tarball is the file INSTALL.
 For some platforms, there are platform-specific instructions.
 Generally, the hardest part is not installing ConMan itself, but PETSc.
\end_layout

\begin_layout Subsubsection
Source Code Repository (Experts Only)
\end_layout

\begin_layout Standard
Advanced users and software developers may be interested in downloading
 the latest ConMan source code directly from the CIG source code repository,
 instead of using the prepared source package.
 To check whether you have a subversion client installed on your machine,
 type:
\end_layout

\begin_layout LyX-Code
svn
\end_layout

\begin_layout Standard
You should get a response that looks something like this:
\end_layout

\begin_layout LyX-Code
Type `svn help' for usage.
\end_layout

\begin_layout Standard
Otherwise, you will need to download and install a Subversion client, available
 at the 
\begin_inset LatexCommand htmlurl
name "Subversion Website"
target "subversion.tigris.org/project_packages.html"

\end_inset

.
 Then the code can be checked out with the following command: 
\end_layout

\begin_layout LyX-Code
svn checkout http://geodynamics.org/svn/cig/mc/3D/ConMan/trunk ConMan
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Support
\end_layout

\begin_layout Standard
The primary point of support for ConMan is the 
\begin_inset LatexCommand url
name "CIG Long-Term Crustal Dynamics Mailing List"
target "cig-long@geodynamics.org"

\end_inset

.
 Feel free to send questions, comments, feature requests, and bugs to the
 list.
 The mailing list is archived at
\end_layout

\begin_layout LyX-Code
\begin_inset LatexCommand htmlurl
name "cig-long Archives"
target "geodynamics.org/pipermail/cig-long/"

\end_inset


\end_layout

\begin_layout Standard
You may also use the bug tracker
\end_layout

\begin_layout LyX-Code
\begin_inset LatexCommand htmlurl
name "Roundup"
target "geodynamics.org/roundup"

\end_inset


\end_layout

\begin_layout Standard
to submit bugs and requests for new features.
\end_layout

\begin_layout Chapter
Running ConMan
\end_layout

\begin_layout Section
Basic Usage
\end_layout

\begin_layout Standard
If you downloaded binaries for your platform, you can run the ConMan executable
 directly.
 For example,
\end_layout

\begin_layout LyX-Code
./ConMan-1_2_2  input/cookbook/yielding.xml
\end_layout

\begin_layout Standard
will output 
\end_layout

\begin_layout LyX-Code
TimeStep = 1, Start time = 0 + 0 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 2, Start time = 0 + 0.0107639 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 3, Start time = 0.0107639 + 0.0107105 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 4, Start time = 0.0214744 + 0.0106587 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 5, Start time = 0.0321332 + 0.0106059 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 6, Start time = 0.0427391 + 0.0105527 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 7, Start time = 0.0532918 + 0.0104996 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 8, Start time = 0.0637914 + 0.0104465 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 9, Start time = 0.0742378 + 0.0103941 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 10, Start time = 0.0846319 + 0.0103424 prev timeStep dt 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
If you do not specify an input file, you will get an error like
\end_layout

\begin_layout LyX-Code

\size small
Error in _AbstractContext_New: The dictionary is empty, meaning no input
 parameters have been feed
\end_layout

\begin_layout LyX-Code

\size small
into your program.
 Perhaps you've forgot to pass any input files ( or command-line arguments
 ) in.
\end_layout

\begin_layout LyX-Code

\size small
ConMan: build/StGermain/Base/IO/src/Journal.c:603: Journal_Firewall: Assertion
 `expression' failed.
\end_layout

\begin_layout LyX-Code

\size small
p0_27845:  p4_error: interrupt SIGx: 6 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
If ConMan cannot find the file, you will get a different error:
\end_layout

\begin_layout LyX-Code

\size small
Error: File input/cookbook/yielding.xml doesn't exist, not readable, or not
 valid.
\end_layout

\begin_layout LyX-Code

\size small
ConMan: build/StGermain/Base/IO/src/Journal.c:603: Journal_Firewall: Assertion
 `expression' failed.
\end_layout

\begin_layout LyX-Code

\size small
p0_16810:  p4_error: interrupt SIGx: 6
\end_layout

\begin_layout Standard
Due to quirks in some implementations of MPI, you may have to specify the
 complete path to the input file (e.g., 
\family typewriter
./ConMan-1_2_2 /home/juser/ConMan/input/cookbook/yielding.xml
\family default
).
\end_layout

\begin_layout Standard
In general, ConMan does not have many defaults, so almost everything must
 be specified in the input file.
 For examples of how to create your own input files, see Chapter 
\begin_inset LatexCommand ref
reference "cha:Cookbooks"

\end_inset

.
 For a complete description of the input file format, see Appendix 
\begin_inset LatexCommand ref
reference "cha:Input-File-Format"

\end_inset

.
 
\end_layout

\begin_layout Standard
If you compile ConMan yourself, you can run it from where you installed
 it.
 If running in parallel on your own machine, prepend 
\family typewriter
mpirun
\family default
 or 
\family typewriter
mpiexec
\family default
 (depending on your local implementation of MPI).
 For example, if your computer has two processors, then
\end_layout

\begin_layout LyX-Code
mpirun -np 2 bin/ConMan /home/juser/ConMan/input/cookbook/yielding.xml
\end_layout

\begin_layout Standard
will use both processors.
\end_layout

\begin_layout Standard
The 
\family typewriter
yielding.xml
\family default
 example should run for 10 time steps and generate a great deal of output
 in the 
\family typewriter
output.template
\family default
 directory.
\end_layout

\begin_layout Section
Advanced Usage
\end_layout

\begin_layout Subsection
Direct Solvers
\end_layout

\begin_layout Standard
If you have a problem with strong viscosity gradients, the default solver
 (GMRES) may converge very slowly.
 Strong viscosity gradients occur when you start with materials with different
 viscosities (e.g., Appendix 
\begin_inset LatexCommand ref
reference "sec:Circular-Inclusion"

\end_inset

, 
\begin_inset LatexCommand ref
reference "sec:Falling-Sphere"

\end_inset

, and 
\begin_inset LatexCommand ref
reference "sec:Falling-Cylinder"

\end_inset

), or when materials yield (e.g., Appendix 
\begin_inset LatexCommand ref
reference "sec:Geomod-2004"

\end_inset

).
\end_layout

\begin_layout Standard
One solution is to use a direct solver instead of GMRES.
 PETSc has a facility where you can use command-line arguments to change
 the solver.
 For example, on a single machine, to use a direct LU solve, you only need
 to append arguments to the command line
\end_layout

\begin_layout LyX-Code
./ConMan-1_2_2  input/cookbook/yielding.xml -pc_type lu -ksp_type preonly
\end_layout

\begin_layout Standard
In parallel, the analogous approach would be to use Mumps, a parallel direct
 solver.
 You first need to make sure that your version of PETSc was installed with
 Mumps.
 If you built PETSc yourself, you need to add the option 
\begin_inset Quotes sld
\end_inset


\family typewriter
--download-mumps=yes
\family default

\begin_inset Quotes srd
\end_inset

 when configuring.
 The PETSc installation on TACC Lonestar has been installed with Mumps.
\end_layout

\begin_layout Standard
Once that is done, enabling it is again just appending a few arguments to
 the command line
\end_layout

\begin_layout LyX-Code
./ConMan-1_2_2  input/cookbook/yielding.xml mat_type aijmumps -ksp_type pre
 only -pc_type lu
\end_layout

\begin_layout Subsection
Command-Line Parameters
\end_layout

\begin_layout Standard
You can also change the default values of the input file without modifying
 that file by appending arguments.
 For example, to only change the number of time steps from the default value
 10 to value 20, use the following command
\end_layout

\begin_layout LyX-Code
./ConMan-1_2_2  input/cookbook/yielding.xml --maxTimeSteps=20
\end_layout

\begin_layout Standard
You can append any number of modified parameters in one unbroken line (here
 shown wrapped around)
\end_layout

\begin_layout LyX-Code

\size small
./ConMan-1_2_2  input/cookbook/yielding.xml --maxTimeSteps=20 --dim=3 --elementRes
I=64 
\newline
--elementResJ=64 --elementResK=64 --particlesPerCell=60 --dumpEvery=10
\end_layout

\begin_layout Subsection
Parallel Issues
\end_layout

\begin_layout Standard
When writing 
\family typewriter
.dat
\family default
 files in parallel (see Sections 
\begin_inset LatexCommand ref
reference "sec:.dat-ASCII-Files"

\end_inset

 and 
\begin_inset LatexCommand ref
reference "sec:.dat-Binary-Files"

\end_inset

), all of the processors have to cooperate.
 This is because the 
\family typewriter
.dat
\family default
 files are single files that have information from every processor.
 ConMan uses file locking to ensure this cooperation.
 However, on some parallel file systems, this can be problematic.
 The only known solution at this point is to turn off checkpointing by setting
 the 
\family typewriter
checkpointEvery
\family default
 parameter to 0.
 
\end_layout

\begin_layout Standard
The VTK files do not suffer from this problem.
 However, the VTK files may contain a large amount of data.
 Writing all of that information to disk may slow down your computation
 significantly.
 The easiest way to tell if this is the case is to remove the line
\end_layout

\begin_layout LyX-Code
<param>Underworld_VTKOutput</param>
\end_layout

\begin_layout Standard
If this makes a big difference, then you can turn off some of the output.
 For example, if you don't include the 
\family typewriter
storeVisc
\family default
 and 
\family typewriter
storeStress
\family default
 lines in your rheologies, then the viscosity and stress on the particles
 will not be output.
 Similarly, the 
\family typewriter
StressField
\family default
 and 
\family typewriter
ViscosityField
\family default
 components can be deleted without harmful effects.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Chapter
\start_of_appendix
Input File Format
\begin_inset LatexCommand label
name "cha:Input-File-Format"

\end_inset


\end_layout

\begin_layout Section
Structure
\end_layout

\begin_layout Standard
The input files are XML files.
 This leverages a well-known format to specify concepts like hierarchies,
 lists, parameters, and arbitrary structures.
 The entire document is placed withing a 
\family typewriter
StGermainData
\family default
 structure.
\end_layout

\begin_layout LyX-Code
<?xml version="1.0"?>
\end_layout

\begin_layout LyX-Code
<StGermainData xmlns="http://www.vpac.org/StGermain/XML_IO_Handler/Jun2003">
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
</StGermainData>
\end_layout

\begin_layout Standard
Within that structure, there are five main parts of every ConMan input file:
 the components, the plugins, EulerDeform, Velocity Conditions, and the
 variables.
\end_layout

\begin_layout Subsection
Components
\begin_inset LatexCommand label
name "sub:Components"

\end_inset


\end_layout

\begin_layout Standard
The components section is separated off from the rest of the file with an
 enclosing 
\family typewriter
components
\family default
 structure.
 This 
\family typewriter
components
\family default
 structure is where the bulk of the file will be.
 It specifies things like what the mesh will be like, which material goes
 where, what the material properties are, what kind of solver to use, etc.
 Most of the ideas you need to specify your problem will go into the components.
 When adding a new component, it is important to remember to put the new
 component inside the components structure.
 Otherwise ConMan will (silently) not use that component.
 For example, an input file such as
\end_layout

\begin_layout LyX-Code
<struct name="components">
\end_layout

\begin_layout LyX-Code
  <struct name="conditionFunctions">
\end_layout

\begin_layout LyX-Code
    <param name="Type">StgFEM_StandardConditionFunctions</param>
\end_layout

\begin_layout LyX-Code
  </struct>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
will correctly initialize 
\family typewriter
StgFEM_StandardConditionFunctions
\family default
, but the input file
\end_layout

\begin_layout LyX-Code
<struct name="components">
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="conditionFunctions">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StgFEM_StandardConditionFunctions</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
will not, and no error message will alert you of the problem.
\end_layout

\begin_layout Subsection
Plugins
\begin_inset LatexCommand label
name "sub:Plugins"

\end_inset


\end_layout

\begin_layout Standard
ConMan also has the ability to load modules during runtime.
 To use these plugins, simply list them in a section outside of the 
\family typewriter
components
\family default
 structure.
 For example, the following lines will enable the 
\family typewriter
DumpSwarm
\family default
, 
\family typewriter
EulerDeform
\family default
, and 
\family typewriter
VTKOutput
\family default
 plugins
\end_layout

\begin_layout LyX-Code
<list name="plugins">
\end_layout

\begin_layout LyX-Code
  <param>Underworld_EulerDeform</param>
\end_layout

\begin_layout LyX-Code
  <param>Underworld_DumpSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param>Underworld_VTKOutput</param>
\end_layout

\begin_layout LyX-Code
</list> 
\end_layout

\begin_layout Standard
Dynamically loading modules is, in general, difficult to get working on
 multiple platforms.
 To make things easier, ConMan is bundled with a number of plugins compiled
 into the code and ready to use:
\end_layout

\begin_layout LyX-Code
StgFEM_FrequentOutput
\end_layout

\begin_layout LyX-Code
StgFEM_CPUTime
\end_layout

\begin_layout LyX-Code
Underworld_MovingMesh
\end_layout

\begin_layout LyX-Code
Underworld_Vrms
\end_layout

\begin_layout LyX-Code
Underworld_EulerDeform
\end_layout

\begin_layout LyX-Code
StgFEM_PrintFeVariableDiscreteValues
\end_layout

\begin_layout LyX-Code
Underworld_DumpSwarm
\end_layout

\begin_layout LyX-Code
Underworld_VTKOutput
\end_layout

\begin_layout Standard
Note that you must still include those plugins in the list of plugins in
 order to use them.
 You can add additional plugins by modifying the list of static plugins
 in 
\family typewriter
src/ConMan/src/main.c
\family default
 and making sure that the plugin is compiled into the ConMan executable.
\end_layout

\begin_layout Standard
If you want to use dynamically loaded plugins, make sure that you compiled
 with shared libraries (use the 
\family typewriter
--with-shared
\family default
 option when compiling) and set your 
\family typewriter
LD_LIBRARY_PATH
\family default
 environment variable appropriately.
\end_layout

\begin_layout Subsection
EulerDeform
\begin_inset LatexCommand label
name "sub:EulerDeform"

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Underworld_EulerDeform
\family default
 component allows the upper surface to move freely or stay rigidly in place.
 An example 
\family typewriter
EulerDeform
\family default
 struct is
\end_layout

\begin_layout LyX-Code
<struct name="EulerDeform">
\end_layout

\begin_layout LyX-Code
  <list name="systems">
\end_layout

\begin_layout LyX-Code
    <struct>
\end_layout

\begin_layout LyX-Code
      <param name="mesh">mesh-constant</param>
\end_layout

\begin_layout LyX-Code
      <param name="remesher">pressureRemesher</param>
\end_layout

\begin_layout LyX-Code
      <param name="velocityField">VelocityField</param>
\end_layout

\begin_layout LyX-Code
      <list name="fields">
\end_layout

\begin_layout LyX-Code
        <struct> 
\end_layout

\begin_layout LyX-Code
          <param name="field">PressureField</param>
\end_layout

\begin_layout LyX-Code
          <param name="variable">pressure</param>
\end_layout

\begin_layout LyX-Code
        </struct>
\end_layout

\begin_layout LyX-Code
      </list>
\end_layout

\begin_layout LyX-Code
    </struct>
\end_layout

\begin_layout LyX-Code
    <struct>
\end_layout

\begin_layout LyX-Code
      <param name="mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
      <param name="remesher">velocityRemesher</param>
\end_layout

\begin_layout LyX-Code
      <param name="velocityField">VelocityField</param>
\end_layout

\begin_layout LyX-Code
      <param name="wrapTop">True</param>
\end_layout

\begin_layout LyX-Code
      <list name="fields">
\end_layout

\begin_layout LyX-Code
        <struct>
\end_layout

\begin_layout LyX-Code
          <param name="field">VelocityField</param>
\end_layout

\begin_layout LyX-Code
          <param name="variable">velocity</param>
\end_layout

\begin_layout LyX-Code
        </struct>
\end_layout

\begin_layout LyX-Code
      </list>
\end_layout

\begin_layout LyX-Code
    </struct>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
This commands ConMan to remesh both the pressure and velocity field.
 The components 
\family typewriter
\size small
pressureRemesher
\family default
, 
\family typewriter
velocityRemesher
\family default
, 
\family typewriter
pressureField
\family default
, 
\family typewriter
velocityField
\family default
, 
\family typewriter
pressure
\family default
\size default
, and
\size small
 
\family typewriter
velocity
\family default
\size default
 all must be defined earlier (see Section 
\begin_inset LatexCommand ref
reference "sub:Components"

\end_inset

).
 
\end_layout

\begin_layout Standard
Note the critical line
\end_layout

\begin_layout LyX-Code
<param name="wrapTop">True</param>
\end_layout

\begin_layout Standard
that makes the top surface conform to the simulation.
 Other options (
\family typewriter
wrapBottom
\family default
, 
\family typewriter
wrapLeft
\family default
) are available, but untested.
 
\end_layout

\begin_layout Standard
Additionally, ConMan can fix the positions of the boundaries.
 For example, if you are running a shortening model, normally ConMan will
 move the boundaries inward as the simulation progresses.
 If different parts of the boundary are moving at different rates (such
 as if you were simulating one slab sliding over the other), then the side
 boundary would quickly become distorted and ruin the simulation.
 To fix the right boundary, set the variable 
\family typewriter
staticRight
\family default
 to 
\family typewriter
True
\end_layout

\begin_layout LyX-Code
<param name="staticRight">True</param>
\end_layout

\begin_layout Standard
Similarly, you can independently set the left, top, bottom, front, and back
 boundaries.
\end_layout

\begin_layout Standard
Note that you must include 
\family typewriter
Underworld_EulerDeform
\family default
 in the list of plugins (see Section 
\begin_inset LatexCommand ref
reference "sub:Plugins"

\end_inset

) in order for this section to have any effect.
\end_layout

\begin_layout Subsection
Initial and Boundary Conditions
\end_layout

\begin_layout Standard
These sections specify the boundary conditions on the velocity, and the
 initial and boundary conditions for the temperature.
 See Sections 
\begin_inset LatexCommand ref
reference "sub:Velocity-Boundary-Conditions"

\end_inset

, 
\begin_inset LatexCommand ref
reference "sub:Temperature-Boundary-Conditions"

\end_inset

, and 
\begin_inset LatexCommand ref
reference "sec:Temperature-Initial-Conditions"

\end_inset

 for more details.
\end_layout

\begin_layout Subsection
Variables
\begin_inset LatexCommand label
name "sub:Variables"

\end_inset


\end_layout

\begin_layout Standard
The last section is where most of our numeric constants are placed.
 For example, how many time steps, how often to print output, etc.
 You may also declare variables for convenience (e.g., the number of grid
 points) and use it elsewhere, such as in the components.
 If you are using the basic set of components, then the more important parameter
s are:
\end_layout

\begin_layout Description
maxTimeSteps The number of time steps to take in the simulation.
 Each time step can cover a different amount of time.
 ConMan determines how big of a step to take by dividing the grid size by
 the largest velocity during that time step.
 Unfortunately, there is no way to stop at a maximum time.
\end_layout

\begin_layout Description
dumpEvery How often DumpSwarm dumps information to files.
\end_layout

\begin_layout Description
checkPointEvery How often to dump every variable to files.
\end_layout

\begin_layout Description
outputPath The directory to put output files in.
\end_layout

\begin_layout Description
dim The number of dimensions of the problem (2 or 3).
\end_layout

\begin_layout Description
minX,minY,minZ,maxX,maxY,maxZ The physical size of the box you are simulating.
 Note that this may be modified by 
\family typewriter
SurfaceAdaptor
\family default
 (Section 
\begin_inset LatexCommand ref
reference "sec:Deformed-Upper-Boundary"

\end_inset

).
\end_layout

\begin_layout Description
elementResI,elementResJ,elementResK The number of elements in each direction.
 Note that the number of grid points is one larger (e.g., 64 elements 
\begin_inset Formula $\Rightarrow$
\end_inset

 65 grid points).
\end_layout

\begin_layout Description
shadowDepth When running in parallel, every parameter only computes quantities
 over a portion of the grid.
 To do this, each processor must keep copies of points that belong to other
 processors.
 This parameter specifies how wide the region of copied points is.
 You should never need to change this from 1.
\end_layout

\begin_layout Description
gaussParticlesX,gaussParticlesY,gaussParticlesZ The number of particles
 in each direction when putting down particles using a Gaussian distribution.
 This is used when mapping quantities from the particles to the grid.
 You should never need to change this number.
\end_layout

\begin_layout Description
particlesPerCell The ideal number of particles in each element.
 ConMan will attempt to keep the number of particles in each element close
 to this number.
 You need to vary this number to gauge how sensitive the results of our
 simulation are to this number.
\end_layout

\begin_layout Description
dtFactor A factor to scale the time step.
 Ordinarily, ConMan will automatically choose an appropriate step size to
 ensure a stable solution.
 If you find that to be too large of a step size, you can change 
\family typewriter
dtFactor
\family default
 to a smaller number.
 The default is 1 (no scaling).
\end_layout

\begin_layout Description
dt The size of the time step.
 Ordinarily, ConMan will automatically choose an appropriate step size to
 ensure a stable solution.
 For some purposes, it may be convenient to explicitly specify the time
 step.
 Be careful! The time step will then be constant over the entire simulation.
 If the grid stretches and/or velocities become larger than you expect,
 you may end up with an unstable simulation.
 The default is 0, which means to use dynamic time stepping.
\end_layout

\begin_layout Description
seed A random number seed used when placing new particles.
 You should never need to change this variable, since changing it should
 not affect the simulation.
\end_layout

\begin_layout Section
Basic Components
\begin_inset LatexCommand label
name "sec:Basic-Components"

\end_inset


\end_layout

\begin_layout Standard
ConMan is built on top of StGermain, which is a very general framework for
 scientific computation.
 Because StGermain is so general, you have to tell it fairly basic things
 that would be implicit in most codes.
 For example, you must tell StGermain that you want to set up a regular
 mesh and solve a finite element problem on it.
 This means you have to include a number of components in every input file.
 These components are
\end_layout

\begin_layout LyX-Code
<struct name="mesh-constant">
\end_layout

\begin_layout LyX-Code
  <param name="Type">FeMesh</param>
\end_layout

\begin_layout LyX-Code
  <param name="elementType">constant</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="constantMesh-generator">
\end_layout

\begin_layout LyX-Code
  <param name="Type">C0Generator</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-constant</param>
\end_layout

\begin_layout LyX-Code
  <param name="elementMesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="mesh-linear">
\end_layout

\begin_layout LyX-Code
  <param name="Type">FeMesh</param>
\end_layout

\begin_layout LyX-Code
  <param name="elementType">linear</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="linearMesh-generator">
\end_layout

\begin_layout LyX-Code
  <param name="Type">CartesianGenerator</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="dim">dim</param>
\end_layout

\begin_layout LyX-Code
  <param name="shadowDepth">shadowDepth</param>
\end_layout

\begin_layout LyX-Code
  <list name="size">
\end_layout

\begin_layout LyX-Code
    <param>elementResI</param>
\end_layout

\begin_layout LyX-Code
    <param>elementResJ</param>
\end_layout

\begin_layout LyX-Code
    <param>elementResK</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
  <list name="minCoord">
\end_layout

\begin_layout LyX-Code
    <param>minX</param>
\end_layout

\begin_layout LyX-Code
    <param>minY</param>
\end_layout

\begin_layout LyX-Code
    <param>minZ</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
  <list name="maxCoord">
\end_layout

\begin_layout LyX-Code
    <param>maxX</param>
\end_layout

\begin_layout LyX-Code
    <param>maxY</param>
\end_layout

\begin_layout LyX-Code
    <param>maxZ</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="velocity">
\end_layout

\begin_layout LyX-Code
  <param name="Type">MeshVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="Rank">Vector</param>
\end_layout

\begin_layout LyX-Code
  <param name="DataType">Double</param>
\end_layout

\begin_layout LyX-Code
  <param name="VectorComponentCount">dim</param>
\end_layout

\begin_layout LyX-Code
  <list name="names">
\end_layout

\begin_layout LyX-Code
    <param>vx</param>
\end_layout

\begin_layout LyX-Code
    <param>vy</param>
\end_layout

\begin_layout LyX-Code
    <param>vz</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="velocityBCs">
\end_layout

\begin_layout LyX-Code
  <param name="Type">CompositeVC</param>
\end_layout

\begin_layout LyX-Code
  <param name="Data">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="velocityICs">
\end_layout

\begin_layout LyX-Code
  <param name="Type">CompositeVC</param>
\end_layout

\begin_layout LyX-Code
  <param name="Data">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="velocityDofLayout">
\end_layout

\begin_layout LyX-Code
  <param name="Type">DofLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="BaseVariableCount">dim</param>
\end_layout

\begin_layout LyX-Code
  <list name="BaseVariables">
\end_layout

\begin_layout LyX-Code
    <param>vx</param>
\end_layout

\begin_layout LyX-Code
    <param>vy</param>
\end_layout

\begin_layout LyX-Code
    <param>vz</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="VelocityField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">FeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="FEMesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="DofLayout">velocityDofLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="BC">velocityBCs</param>
\end_layout

\begin_layout LyX-Code
  <param name="IC">velocityICs</param>
\end_layout

\begin_layout LyX-Code
  <param name="LinkedDofInfo">velocityLinkedDofs</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="VelocityMagnitudeField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">Magnitude</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">VelocityField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="VelocityGradientsField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">Gradient</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">VelocityField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="VelocityGradientsInvariantField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">TensorInvariant</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">VelocityGradientsField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="VelocityXXField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">TakeFirstComponent</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">VelocityField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="VelocityYYField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">TakeSecondComponent</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">VelocityField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="StrainRateField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">TensorSymmetricPart</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">VelocityGradientsField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="VorticityField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">TensorAntisymmetricPart</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">VelocityGradientsField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="StrainRateInvariantField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">SymmetricTensor_Invariant</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">StrainRateField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="StrainRateXXField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">TakeFirstComponent</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">StrainRateField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="StrainRateYYField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">TakeSecondComponent</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">StrainRateField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="pressure">
\end_layout

\begin_layout LyX-Code
  <param name="Type">MeshVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-constant</param>
\end_layout

\begin_layout LyX-Code
  <param name="Rank">Scalar</param>
\end_layout

\begin_layout LyX-Code
  <param name="DataType">Double</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="pressureDofLayout">
\end_layout

\begin_layout LyX-Code
  <param name="Type">DofLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-constant</param>
\end_layout

\begin_layout LyX-Code
  <list name="BaseVariables">
\end_layout

\begin_layout LyX-Code
    <param>pressure</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="PressureField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">FeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="FEMesh">mesh-constant</param>
\end_layout

\begin_layout LyX-Code
  <param name="DofLayout">pressureDofLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="LinkedDofInfo">pressureLinkedDofs</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="StressField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StressField</param>
\end_layout

\begin_layout LyX-Code
  <param name="StrainRateField">StrainRateField</param>
\end_layout

\begin_layout LyX-Code
  <param name="Context">context</param>
\end_layout

\begin_layout LyX-Code
  <param name="ConstitutiveMatrix">constitutiveMatrix</param>
\end_layout

\begin_layout LyX-Code
  <param name="Swarm">picIntegrationPoints</param>
\end_layout

\begin_layout LyX-Code
  <param name="Mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="IC">stressICs</param>
\end_layout

\begin_layout LyX-Code
</struct> 
\end_layout

\begin_layout LyX-Code
<struct name="ViscosityField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">ViscosityField</param>
\end_layout

\begin_layout LyX-Code
  <param name="Context">context</param>
\end_layout

\begin_layout LyX-Code
  <param name="Swarm">picIntegrationPoints</param>
\end_layout

\begin_layout LyX-Code
  <param name="Mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="ConstitutiveMatrix">constitutiveMatrix</param>
\end_layout

\begin_layout LyX-Code
</struct> 
\end_layout

\begin_layout LyX-Code
<struct name="cellLayout">
\end_layout

\begin_layout LyX-Code
  <param name="Type">SingleCellLayout</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="particleLayout">
\end_layout

\begin_layout LyX-Code
  <param name="Type">GaussParticleLayout</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="gaussSwarm">
\end_layout

\begin_layout LyX-Code
  <param name="Type">IntegrationPointsSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="CellLayout">cellLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="ParticleLayout">particleLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeMesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="TimeIntegrator">timeIntegrator</param>
\end_layout

\begin_layout LyX-Code
  <param name="IntegrationPointMapper">gaussMapper</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="gaussMapper">
\end_layout

\begin_layout LyX-Code
  <param name="Type">GaussMapper</param>
\end_layout

\begin_layout LyX-Code
  <param name="IntegrationPointsSwarm">gaussSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="MaterialPointsSwarm">gaussMaterialSwarm</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="backgroundLayout">
\end_layout

\begin_layout LyX-Code
  <param name="Type">BackgroundParticleLayout</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="gaussMaterialSwarm">
\end_layout

\begin_layout LyX-Code
  <param name="Type">MaterialPointsSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="CellLayout">cellLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="ParticleLayout">backgroundLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeMesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="timeIntegrator">
\end_layout

\begin_layout LyX-Code
  <param name="Type">TimeIntegrator</param>
\end_layout

\begin_layout LyX-Code
  <param name="order">1</param>
\end_layout

\begin_layout LyX-Code
  <param name="simultaneous">t</param>
\end_layout

\begin_layout LyX-Code
  <param name="Context">context</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="elementCellLayout">
\end_layout

\begin_layout LyX-Code
  <param name="Type">ElementCellLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="Mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="weights">
\end_layout

\begin_layout LyX-Code
  <param name="Type">PCDVC</param>
\end_layout

\begin_layout LyX-Code
  <param name="resolutionX">10</param>
\end_layout

\begin_layout LyX-Code
  <param name="resolutionY">10</param>
\end_layout

\begin_layout LyX-Code
  <param name="resolutionZ">10</param>
\end_layout

\begin_layout LyX-Code
  <param name="lowerT">0.6</param>
\end_layout

\begin_layout LyX-Code
  <param name="upperT">25</param>
\end_layout

\begin_layout LyX-Code
  <param name="maxDeletions">3</param>
\end_layout

\begin_layout LyX-Code
  <param name="maxSplits">3</param>
\end_layout

\begin_layout LyX-Code
  <param name="MaterialPointsSwarm">materialSwarm</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="localLayout">
\end_layout

\begin_layout LyX-Code
  <param name="Type">MappedParticleLayout</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="picIntegrationPoints">
\end_layout

\begin_layout LyX-Code
  <param name="Type">IntegrationPointsSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="CellLayout">elementCellLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="ParticleLayout">localLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeMesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="WeightsCalculator">weights</param>
\end_layout

\begin_layout LyX-Code
  <param name="TimeIntegrator">timeIntegrator</param>
\end_layout

\begin_layout LyX-Code
  <param name="IntegrationPointMapper">mapper</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="mapper">
\end_layout

\begin_layout LyX-Code
  <param name="Type">CoincidentMapper</param>
\end_layout

\begin_layout LyX-Code
  <param name="IntegrationPointsSwarm">picIntegrationPoints</param>
\end_layout

\begin_layout LyX-Code
  <param name="MaterialPointsSwarm">materialSwarm</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="materialSwarmParticleLayout">
\end_layout

\begin_layout LyX-Code
  <param name="Type">MeshParticleLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="cellParticleCount">particlesPerCell</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="materialSwarm">
\end_layout

\begin_layout LyX-Code
  <param name="Type">MaterialPointsSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="CellLayout">elementCellLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="ParticleLayout">materialSwarmParticleLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeMesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="SplittingRoutine">splittingRoutine</param>
\end_layout

\begin_layout LyX-Code
  <param name="RemovalRoutine">removalRoutine</param>
\end_layout

\begin_layout LyX-Code
  <param name="EscapedRoutine">escapedRoutine</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="materialSwarmAdvector">
\end_layout

\begin_layout LyX-Code
  <param name="Type">SwarmAdvector</param>
\end_layout

\begin_layout LyX-Code
  <param name="Swarm">materialSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="TimeIntegrator">timeIntegrator</param>
\end_layout

\begin_layout LyX-Code
  <param name="VelocityField">VelocityField</param>
\end_layout

\begin_layout LyX-Code
  <param name="PeriodicBCsManager">periodicBCsManager</param>
\end_layout

\begin_layout LyX-Code
  <param name="allowFallbackToFirstOrder">True</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="splittingRoutine">
\end_layout

\begin_layout LyX-Code
  <param name="Type">ReseedSplitting</param>
\end_layout

\begin_layout LyX-Code
  <param name="idealParticleCount">particlesPerCell</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="solutionVelocity">
\end_layout

\begin_layout LyX-Code
  <param name="Type">SolutionVector</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">VelocityField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="solutionPressure">
\end_layout

\begin_layout LyX-Code
  <param name="Type">SolutionVector</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">PressureField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="mom_force">
\end_layout

\begin_layout LyX-Code
  <param name="Type">ForceVector</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">VelocityField</param>
\end_layout

\begin_layout LyX-Code
  <param name="ExtraInfo">context</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="cont_force">
\end_layout

\begin_layout LyX-Code
  <param name="Type">ForceVector</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">PressureField</param>
\end_layout

\begin_layout LyX-Code
  <param name="ExtraInfo">context</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="k_matrix">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StiffnessMatrix</param>
\end_layout

\begin_layout LyX-Code
  <param name="RowVariable">VelocityField</param>
\end_layout

\begin_layout LyX-Code
  <param name="ColumnVariable">VelocityField</param>
\end_layout

\begin_layout LyX-Code
  <param name="RHS">mom_force</param>
\end_layout

\begin_layout LyX-Code
  <param name="allowZeroElementContributions">False</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="constitutiveMatrix">
\end_layout

\begin_layout LyX-Code
  <param name="Type">ConstitutiveMatrixCartesian</param>
\end_layout

\begin_layout LyX-Code
  <param name="Swarm">picIntegrationPoints</param>
\end_layout

\begin_layout LyX-Code
  <param name="StiffnessMatrix">k_matrix</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="g_matrix">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StiffnessMatrix</param>
\end_layout

\begin_layout LyX-Code
  <param name="RowVariable">VelocityField</param>
\end_layout

\begin_layout LyX-Code
  <param name="ColumnVariable">PressureField</param>
\end_layout

\begin_layout LyX-Code
  <param name="RHS">cont_force</param>
\end_layout

\begin_layout LyX-Code
  <param name="allowZeroElementContributions">False</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="gradientStiffnessMatrixTerm">
\end_layout

\begin_layout LyX-Code
  <param name="Type">GradientStiffnessMatrixTerm</param>
\end_layout

\begin_layout LyX-Code
  <param name="Swarm">gaussSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="StiffnessMatrix">g_matrix</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="preconditioner">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StiffnessMatrix</param>
\end_layout

\begin_layout LyX-Code
  <param name="RowVariable">PressureField</param>
\end_layout

\begin_layout LyX-Code
  <param name="ColumnVariable">PressureField</param>
\end_layout

\begin_layout LyX-Code
  <param name="RHS">cont_force</param>
\end_layout

\begin_layout LyX-Code
  <param name="allowZeroElementContributions">True</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="preconditionerTerm">
\end_layout

\begin_layout LyX-Code
  <param name="Type">UzawaPreconditionerTerm</param>
\end_layout

\begin_layout LyX-Code
  <param name="Swarm">picIntegrationPoints</param>
\end_layout

\begin_layout LyX-Code
  <param name="StiffnessMatrix">preconditioner</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="uzawa">
\end_layout

\begin_layout LyX-Code
  <param name="Type">Stokes_SLE_UzawaSolver</param>
\end_layout

\begin_layout LyX-Code
  <param name="Preconditioner">preconditioner</param>
\end_layout

\begin_layout LyX-Code
  <param name="tolerance">1.0e-5</param>
\end_layout

\begin_layout LyX-Code
  <param name="maxIterations">5000</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="stokesEqn">
\end_layout

\begin_layout LyX-Code
  <param name="Type">Stokes_SLE</param>
\end_layout

\begin_layout LyX-Code
  <param name="SLE_Solver">uzawa</param>
\end_layout

\begin_layout LyX-Code
  <param name="Context">context</param>
\end_layout

\begin_layout LyX-Code
  <param name="StressTensorMatrix">k_matrix</param>
\end_layout

\begin_layout LyX-Code
  <param name="GradientMatrix">g_matrix</param>
\end_layout

\begin_layout LyX-Code
  <param name="DivergenceMatrix"></param>
\end_layout

\begin_layout LyX-Code
  <param name="CompressibilityMatrix">c_matrix</param>
\end_layout

\begin_layout LyX-Code
  <param name="VelocityVector">solutionVelocity</param>
\end_layout

\begin_layout LyX-Code
  <param name="PressureVector">solutionPressure</param>
\end_layout

\begin_layout LyX-Code
  <param name="ForceVector">mom_force</param>
\end_layout

\begin_layout LyX-Code
  <param name="ContinuityForceVector">cont_force</param>
\end_layout

\begin_layout LyX-Code
  <param name="killNonConvergent">false</param>
\end_layout

\begin_layout LyX-Code
  <param name="nonLinearMaxIterations">nonLinearMaxIterations</param>
\end_layout

\begin_layout LyX-Code
  <param name="nonLinearTolerance">nonLinearTolerance</param>
\end_layout

\begin_layout LyX-Code
  <param name="makeConvergenceFile">false</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="background">
\end_layout

\begin_layout LyX-Code
  <param name="Type">Everywhere</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="escapedRoutine">
\end_layout

\begin_layout LyX-Code
  <param name="Type">EscapedRoutine</param>
\end_layout

\begin_layout LyX-Code
  <param name="idealParticleCount">0</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="velocityRemesher">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StripRemesher</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="meshType">regular</param>
\end_layout

\begin_layout LyX-Code
  <list name="dim">
\end_layout

\begin_layout LyX-Code
    <param>true</param>
\end_layout

\begin_layout LyX-Code
    <param>true</param>
\end_layout

\begin_layout LyX-Code
    <param>true</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="pressureRemesher">
\end_layout

\begin_layout LyX-Code
  <param name="Type">CellRemesher</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-constant</param>
\end_layout

\begin_layout LyX-Code
  <param name="meshType">regular</param>
\end_layout

\begin_layout LyX-Code
  <param name="dim">3</param>
\end_layout

\begin_layout LyX-Code
  <param name="cellMesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="storeViscosity">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StoreVisc</param>
\end_layout

\begin_layout LyX-Code
  <param name="MaterialPointsSwarm">materialSwarm</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="storeStress">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StoreStress</param>
\end_layout

\begin_layout LyX-Code
  <param name="MaterialPointsSwarm">materialSwarm</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
For almost all simulations, you will not need to change these components.
\end_layout

\begin_layout Section
Temperature components
\begin_inset LatexCommand label
name "sec:Temperature-components"

\end_inset


\end_layout

\begin_layout Standard
To configure ConMan to use and evolve the temperature, you need to add the
 following components
\end_layout

\begin_layout LyX-Code
<!-- Temperature components -->
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<struct name="temperature">
\end_layout

\begin_layout LyX-Code
  <param name="Type">MeshVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Rank">Scalar</param>
\end_layout

\begin_layout LyX-Code
  <param name="DataType">Double</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="temperatureBCs">
\end_layout

\begin_layout LyX-Code
  <param name="Type">CompositeVC</param>
\end_layout

\begin_layout LyX-Code
  <param name="Data">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="temperatureICs">
\end_layout

\begin_layout LyX-Code
  <param name="Type">CompositeVC</param>
\end_layout

\begin_layout LyX-Code
  <param name="Data">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="temperatureDofLayout">
\end_layout

\begin_layout LyX-Code
  <param name="Type">DofLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="mesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <list name="BaseVariables">
\end_layout

\begin_layout LyX-Code
    <param>temperature</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="TemperatureField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">FeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="FEMesh">mesh-linear</param>
\end_layout

\begin_layout LyX-Code
  <param name="DofLayout">temperatureDofLayout</param>
\end_layout

\begin_layout LyX-Code
  <param name="BC">temperatureBCs</param>
\end_layout

\begin_layout LyX-Code
  <param name="IC">temperatureICs</param>
\end_layout

\begin_layout LyX-Code
  <param name="LinkedDofInfo">temperatureLinkedDofs</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="TemperatureGradientsField">
\end_layout

\begin_layout LyX-Code
  <param name="Type">OperatorFeVariable</param>
\end_layout

\begin_layout LyX-Code
  <param name="Operator">Gradient</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">TemperatureField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
  
\end_layout

\begin_layout LyX-Code
<!-- Energy Equation -->
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<struct name="residual">
\end_layout

\begin_layout LyX-Code
  <param name="Type">ForceVector</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">TemperatureField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="massMatrix">
\end_layout

\begin_layout LyX-Code
  <param name="Type">ForceVector</param>
\end_layout

\begin_layout LyX-Code
  <param name="FeVariable">TemperatureField</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="predictorMulticorrector">
\end_layout

\begin_layout LyX-Code
  <param name="Type">AdvDiffMulticorrector</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="EnergyEqn">
\end_layout

\begin_layout LyX-Code
  <param name="Type">AdvectionDiffusionSLE</param>
\end_layout

\begin_layout LyX-Code
  <param name="SLE_Solver">predictorMulticorrector</param>
\end_layout

\begin_layout LyX-Code
  <param name="Context">context</param>
\end_layout

\begin_layout LyX-Code
  <param name="PhiField">TemperatureField</param>
\end_layout

\begin_layout LyX-Code
  <param name="Residual">residual</param>
\end_layout

\begin_layout LyX-Code
  <param name="MassMatrix">massMatrix</param>
\end_layout

\begin_layout LyX-Code
  <param name="courantFactor">0.25</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="lumpedMassMatrixForceTerm">
\end_layout

\begin_layout LyX-Code
  <param name="Type">LumpedMassMatrixForceTerm</param>
\end_layout

\begin_layout LyX-Code
  <param name="Swarm">gaussSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="ForceVector">massMatrix</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="defaultResidualForceTerm">
\end_layout

\begin_layout LyX-Code
  <param name="Type">AdvDiffResidualForceTerm</param>
\end_layout

\begin_layout LyX-Code
  <param name="Swarm">gaussSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="ForceVector">residual</param>
\end_layout

\begin_layout LyX-Code
  <param name="ExtraInfo">EnergyEqn</param>
\end_layout

\begin_layout LyX-Code
  <param name="VelocityField">VelocityField</param>
\end_layout

\begin_layout LyX-Code
  <param name="defaultDiffusivity">defaultDiffusivity</param>
\end_layout

\begin_layout LyX-Code
  <param name="UpwindXiFunction">Exact</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="internalHeatingTerm">
\end_layout

\begin_layout LyX-Code
  <param name="Type">RadiogenicHeatingTerm</param>
\end_layout

\begin_layout LyX-Code
  <param name="ForceVector">residual</param>
\end_layout

\begin_layout LyX-Code
  <param name="Swarm">picIntegrationPoints</param>
\end_layout

\begin_layout LyX-Code
</struct>   
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
You should never need to modify these components.
\end_layout

\begin_layout Standard
You need to specify the thermal diffusivity.
 You can specify a single diffusivity for all materials by adding a line
 like 
\end_layout

\begin_layout LyX-Code
<param name="defaultDiffusivity">1</param>
\end_layout

\begin_layout Standard
to the list of variables.
 You can also override this default for each material (see Section 
\begin_inset LatexCommand ref
reference "sec:Materials"

\end_inset

).
\end_layout

\begin_layout Standard
You will also need to add in initial and boundary conditions (see Sections
 
\begin_inset LatexCommand ref
reference "sub:Temperature-Boundary-Conditions"

\end_inset

 and 
\begin_inset LatexCommand ref
reference "sec:Temperature-Initial-Conditions"

\end_inset

).
 Finally, you may want to set material properties for the buoyancy forces
 (see Section 
\begin_inset LatexCommand ref
reference "sec:Buoyancy-Forces"

\end_inset

) and radiogenic heating (see Section 
\begin_inset LatexCommand ref
reference "sec:Materials"

\end_inset

).
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
defaultDiffusivity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Shapes
\begin_inset LatexCommand label
name "sec:Shapes"

\end_inset


\end_layout

\begin_layout Standard
When setting up a simulation, ConMan reads in shapes to determine what to
 put where.
 For example, you can create a simulation with different materials by creating
 different shapes and putting different materials in them.
 As a simple example, you can create a 3D box
\end_layout

\begin_layout LyX-Code
<struct name="simpleBox">
\end_layout

\begin_layout LyX-Code
  <param name="Type">Box</param>
\end_layout

\begin_layout LyX-Code
  <param name="startX">0.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="endX">1.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="startY">0.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="endY">1.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="startZ">0.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="endZ">1.0</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
You can perform operations on shapes to create new shapes.
 For example, if you also create a sphere
\end_layout

\begin_layout LyX-Code
<struct name="simpleSphere">
\end_layout

\begin_layout LyX-Code
  <param name="Type">Sphere</param>
\end_layout

\begin_layout LyX-Code
  <param name="radius">1.0</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
then you can compose it with the box to create a new shape
\end_layout

\begin_layout LyX-Code
<struct name="nonSphere">
\end_layout

\begin_layout LyX-Code
  <param name="Type">Intersection</param>
\end_layout

\begin_layout LyX-Code
  <list name="shapes">
\end_layout

\begin_layout LyX-Code
    <param>simpleBox</param>
\end_layout

\begin_layout LyX-Code
    <param>!simpleSphere</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
Note that the exclamation point ``!'' in front of 
\family typewriter
simpleSphere
\family default
 means ``not.'' So 
\family typewriter
Intersection
\family default
 creates a shape that is the intersection of the box and everywhere outside
 of the sphere.
 You can list an arbitrary number of shapes in 
\family typewriter
Intersection
\family default
.
 Also, you can use 
\family typewriter
Union
\family default
 to create a shape that covers all of the input shapes.
\end_layout

\begin_layout Standard
In addition, every shape accepts the translation variables 
\family typewriter
CentreX
\family default
, 
\family typewriter
CentreY
\family default
, and 
\family typewriter
CentreZ
\family default
, and the Euler angles 
\family typewriter
alpha
\family default
, 
\family typewriter
beta
\family default
, and 
\family typewriter
gamma
\family default
.
 So if you modify the Box example above to
\end_layout

\begin_layout LyX-Code
<struct name="simpleBox">
\end_layout

\begin_layout LyX-Code
  <param name="Type">Box</param>
\end_layout

\begin_layout LyX-Code
  <param name="CentreX">1.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="startX">0.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="endX">1.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="startY">0.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="endY">1.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="startZ">0.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="endZ">1.0</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
then the box will actually span from 1 to 2.
\end_layout

\begin_layout Standard
The Euler angles use the 
\begin_inset Formula $y$
\end_inset

 convention, first rotating about the original 
\begin_inset Formula $z$
\end_inset

 axis an angle 
\begin_inset Formula $\gamma$
\end_inset

, then rotating around the new 
\begin_inset Formula $y$
\end_inset

 axis an angle 
\begin_inset Formula $\beta$
\end_inset

, and finally a rotation around the new 
\begin_inset Formula $z$
\end_inset

 axis an angle 
\begin_inset Formula $\alpha$
\end_inset

.
 Specifically, these rotations are expressed through the rotation matrix
\end_layout

\begin_layout Standard
\begin_inset Formula \[
R=\left(\begin{array}{ccc}
-\sin\alpha\sin\gamma+\cos\alpha\cos\beta\cos\gamma & \sin\alpha\cos\gamma+\cos\beta\sin\gamma\cos\alpha & -\cos\alpha\sin\beta\\
-\cos\alpha\sin\gamma-\cos\beta\cos\gamma\sin\alpha & \cos\alpha\cos\gamma-\cos\beta\sin\gamma\sin\alpha & \sin\alpha\sin\beta\\
\sin\beta\cos\alpha & \sin\beta\sin\alpha & \cos\beta\end{array}\right).\]

\end_inset

 So when ConMan attempts to figure out whether a coordinate 
\begin_inset Formula $(x,y,z)$
\end_inset

 is inside a shape, it creates a new coordinate
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\left(\begin{array}{c}
x'\\
y'\\
z'\end{array}\right)=\left(\left(\begin{array}{c}
x\\
y\\
z\end{array}\right)-\left(\begin{array}{c}
CentreX\\
CentreY\\
CentreZ\end{array}\right)\right)R,\]

\end_inset

 which it uses in the formulas below.
\end_layout

\begin_layout Standard
Finally, you can command ConMan to invert the shape with the 
\family typewriter
invert
\family default
 variable, making the inside the outside and vice versa.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CentreX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CentreY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CentreZ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
alpha
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
beta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
gamma
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
invert
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
BelowCosinePlane 
\end_layout

\begin_layout Standard
\begin_inset Formula \[
y<offset+delta*\cos\left(\frac{\pi period}{180}*x+phase\right)\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
delta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0.5
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
period
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
phase
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

See also the notes for BelowPlane.
\end_layout

\begin_layout Subsection
BelowPlane
\end_layout

\begin_layout Standard
\begin_inset Formula \[
y<offset\]

\end_inset


\end_layout

\begin_layout Standard
This shape also uses the variables 
\begin_inset Formula $minX$
\end_inset

, 
\begin_inset Formula $minY$
\end_inset

, 
\begin_inset Formula $minZ$
\end_inset

, 
\begin_inset Formula $maxX$
\end_inset

, 
\begin_inset Formula $maxY$
\end_inset

, and 
\begin_inset Formula $maxZ$
\end_inset

, which are only used when computing the volume of this shape.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
minX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
minY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
minZ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
maxX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
maxY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
maxZ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Box
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
startX<x<endX\\
startY<y<endY\\
startZ<z<endZ\end{array}\]

\end_inset

Alternately, you can use widths, in which case 
\begin_inset Formula \[
\begin{array}{c}
|x|<widthX/2\\
|y|<widthY/2\\
|z|<widthZ/2\end{array}.\]

\end_inset

You may mix and match these specification (e.g., use start/end for 
\begin_inset Formula $x$
\end_inset

, and width for 
\begin_inset Formula $y$
\end_inset

).
 If both are specified for one coordinate, ConMan will use start and end.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
widthX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
widthY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
widthZ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
ConvexHull
\end_layout

\begin_layout Standard
This shape is a convenience function for creating intersections of 
\family typewriter
BelowPlane
\family default
.
 The input is a list of vertices.
 From each vertex, ConMan computes a vector and plane normal to this vector.
 The half spaces below the planes are then intersected to create a shape.
 At present, you may only use three vertices in 2D, and four vertices in
 3D.
 As an example, the shape
\end_layout

\begin_layout LyX-Code
<struct name="triangleShape">
\end_layout

\begin_layout LyX-Code
  <param name="Type">ConvexHull</param>
\end_layout

\begin_layout LyX-Code
  <list name="verticies">
\end_layout

\begin_layout LyX-Code
    <asciidata>
\end_layout

\begin_layout LyX-Code
      <columnDefinition name = "x" type="double"/>
\end_layout

\begin_layout LyX-Code
      <columnDefinition name = "y" type="double"/>
\end_layout

\begin_layout LyX-Code
                                      1.0      1.0
\end_layout

\begin_layout LyX-Code
                                     -1.0      1.0
\end_layout

\begin_layout LyX-Code
                                      0.0     -1.0
\end_layout

\begin_layout LyX-Code
    </asciidata>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
creates a shape with vertices at (0,2), (4,-2), (-4,-2).
\end_layout

\begin_layout Subsection
Cylinder
\end_layout

\begin_layout Standard
This shape uses a variable 
\begin_inset Formula $perpendicularAxis$
\end_inset

 to determine which direction is perpendicular to the axis of the cylinder.
 This variable accepts any of (x, y, z, X, Y, Z, i, j, k, I, J, K, 0, 1,
 2).
 For the case where 
\begin_inset Formula $perpendicularAxis=z$
\end_inset

, then
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula \[
\begin{array}{c}
radius^{2}>x^{2}+y^{2}\\
startX<x<endX\\
startY<y<endY\\
startZ<z<endZ\end{array}.\]

\end_inset


\begin_inset VSpace defskip
\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
radius
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
startX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $-\infty$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
startY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $-\infty$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
startZ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $-\infty$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
endX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $\infty$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
endY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $\infty$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
endZ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $\infty$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Everywhere
\end_layout

\begin_layout Standard
This is a convenience shape simply meaning everywhere.
\end_layout

\begin_layout Subsection
PolygonShape
\end_layout

\begin_layout Standard
This is primarily a two-dimensional shape.
 The input to this shape is a list of vertices.
 To figure out whether a point is inside the polygon, ConMan adds up all
 of the angles of the vectors going to the vertices.
 If the point is inside the polygon, then the angles will sum to 
\begin_inset Formula $\pm2\pi$
\end_inset

, depending on which direction you specify the vertices.
 If the point is outside the polygon, then the angles sum to 0.
 A simple example is a triangle
\end_layout

\begin_layout LyX-Code
    <struct name="triangleShape">
\end_layout

\begin_layout LyX-Code
      <param name="Type">PolygonShape</param>
\end_layout

\begin_layout LyX-Code
      <list name="verticies">
\end_layout

\begin_layout LyX-Code
        <asciidata>
\end_layout

\begin_layout LyX-Code
        <columnDefinition name = "x" type="double"/>
\end_layout

\begin_layout LyX-Code
        <columnDefinition name = "y" type="double"/>
\end_layout

\begin_layout LyX-Code
                                        0.0      0.0
\end_layout

\begin_layout LyX-Code
                                        1.0      0.0
\end_layout

\begin_layout LyX-Code
                                        1.0      1.0
\end_layout

\begin_layout LyX-Code
        </asciidata>
\end_layout

\begin_layout LyX-Code
      </list>
\end_layout

\begin_layout LyX-Code
    </struct>
\end_layout

\begin_layout Standard
This creates a triangle with vertices at (0,0), (1,0), (1,1).
\end_layout

\begin_layout Standard
You can extrude this shape into three dimensions by specifying startZ and
 endZ.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
startZ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
endZ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Sphere
\end_layout

\begin_layout Standard
\begin_inset Formula \[
x^{2}+y^{2}+z^{2}<radius^{2}\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
radius
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Superellipsoid
\end_layout

\begin_layout Standard
In two dimensions
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\left(\frac{x}{radiusX}\right)^{2/epsilon1}+\left(\frac{y}{radiusY}\right)^{2/epsilon1}<1,\]

\end_inset

and in three dimensions
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula \[
\left(\left(\frac{x}{radiusX}\right)^{2/epsilon2}+\left(\frac{y}{radiusY}\right)^{2/epsilon2}\right)^{epsilon2/epsilon1}+\left(\frac{z}{radiusZ}\right)^{2/epsilon1}<1.\]

\end_inset


\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
radiusX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
radiusY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
radiusZ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
epsilon1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
epsilon2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Materials
\begin_inset LatexCommand label
name "sec:Materials"

\end_inset


\end_layout

\begin_layout Standard
ConMan supports two kinds of rheologies: viscous and yielding.
 You can combine these two rheologies to create a more realistic composite
 rheology.
 You then pair this composite rheology with a shape to actually lay down
 material on the grid.
 As a simple example, you can create a viscous rheology
\end_layout

\begin_layout LyX-Code
<struct name="viscousRheology">
\end_layout

\begin_layout LyX-Code
  <param name="Type">MaterialViscosity</param>
\end_layout

\begin_layout LyX-Code
  <param name="eta0">10.0</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
and a Von Mises yielding rheology
\end_layout

\begin_layout LyX-Code
<struct name="strainWeakening">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StrainWeakening</param>
\end_layout

\begin_layout LyX-Code
  <param name="TimeIntegrator">timeIntegrator</param>
\end_layout

\begin_layout LyX-Code
  <param name="MaterialPointsSwarm">materialSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="softeningStrain">0.1</param>
\end_layout

\begin_layout LyX-Code
  <param name="initialDamageFraction">0.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="initialDamageWavenumber">0.5</param>
\end_layout

\begin_layout LyX-Code
  <param name="initialDamageFactor">0.5</param>
\end_layout

\begin_layout LyX-Code
  <param name="healingRate">0.0</param>
\end_layout

\begin_layout LyX-Code
</struct>
\newline

\newline
<struct name="yieldingRheology">
\end_layout

\begin_layout LyX-Code
  <param name="Type">VonMises</param>
\end_layout

\begin_layout LyX-Code
  <param name="cohesion">10.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="cohesionAfterSoftening">1.0</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
and combine them together with 
\family typewriter
materialShape
\family default
 (see Section 
\begin_inset LatexCommand ref
reference "sec:Shapes"

\end_inset

 on how to create shapes)
\end_layout

\begin_layout LyX-Code
<struct name="yieldingMaterial">
\end_layout

\begin_layout LyX-Code
  <param name="Type">RheologyMaterial</param>
\end_layout

\begin_layout LyX-Code
  <param name="Shape">yieldingShape</param>
\end_layout

\begin_layout LyX-Code
  <list name="Rheology">
\end_layout

\begin_layout LyX-Code
    <param>viscousRheology</param>
\end_layout

\begin_layout LyX-Code
    <param>yieldingRheology</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
To output the effective isotropic viscosity and stress, you have to add
 
\family typewriter
StoreVisc
\family default
 and 
\family typewriter
StoreStress
\family default
 components to the material
\end_layout

\begin_layout LyX-Code
<struct name="storeViscosity">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StoreVisc</param>
\end_layout

\begin_layout LyX-Code
  <param name="MaterialPointsSwarm">materialSwarm</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout LyX-Code
<struct name="storeStress">
\end_layout

\begin_layout LyX-Code
  <param name="Type">StoreStress</param>
\end_layout

\begin_layout LyX-Code
  <param name="MaterialPointsSwarm">materialSwarm</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
and then add them to the material
\end_layout

\begin_layout LyX-Code
<struct name="yieldingMaterial">
\end_layout

\begin_layout LyX-Code
  <param name="Type">RheologyMaterial</param>
\end_layout

\begin_layout LyX-Code
  <param name="Shape">yieldingShape</param>
\end_layout

\begin_layout LyX-Code
  <list name="Rheology">
\end_layout

\begin_layout LyX-Code
    <param>storeViscosity</param>
\end_layout

\begin_layout LyX-Code
    <param>storeStress</param>
\end_layout

\begin_layout LyX-Code
    <param>viscousRheology</param>
\end_layout

\begin_layout LyX-Code
    <param>yieldingRheology</param>
\end_layout

\begin_layout LyX-Code
  </list>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
For each material, you can specify a density, a coefficient of thermal expansivi
ty (
\begin_inset Formula $\alpha$
\end_inset

), and a thermal diffusivity.
\end_layout

\begin_layout Standard
The density and expansivity are used by the 
\family typewriter
BuoyancyForceTerm
\family default
 component (see Section 
\begin_inset LatexCommand ref
reference "sub:BouyancyForceTerm"

\end_inset

) to create buoyancy forces.
 The diffusivity is used by the temperature solver (see Section 
\begin_inset LatexCommand ref
reference "sec:Temperature-components"

\end_inset

).
\end_layout

\begin_layout Standard
You can also specify multiple radiogenic heating rates (Q) and radiogenic
 timescales (
\begin_inset Formula $\lambda$
\end_inset

).
 This simulates the action of multiple radioactive materials with different
 half-lives.
 To enable this, you must provide a list of Qs and 
\begin_inset Formula $\lambda$
\end_inset

s.
 For example, to specify two different radioactive species, add something
 like
\end_layout

\begin_layout LyX-Code
<list name="heatingElements">
\end_layout

\begin_layout LyX-Code
  <struct>
\end_layout

\begin_layout LyX-Code
    <param name="Q">1.0</param>
\end_layout

\begin_layout LyX-Code
    <param name="lambda">1.0</param>
\end_layout

\begin_layout LyX-Code
  </struct>
\end_layout

\begin_layout LyX-Code
  <struct>
\end_layout

\begin_layout LyX-Code
    <param name="Q">2.0</param>
\end_layout

\begin_layout LyX-Code
    <param name="lambda">2.0</param>
\end_layout

\begin_layout LyX-Code
  </struct>
\end_layout

\begin_layout LyX-Code
</list>
\end_layout

\begin_layout Standard
At a given time 
\begin_inset Formula $t$
\end_inset

, each radioactive element will generate
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Qe^{-\lambda t}\]

\end_inset

 units of energy.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
density
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
alpha
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
diffusivity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
lambda
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
StoreVisc and StoreStress
\begin_inset LatexCommand label
name "sub:StoreViscosity"

\end_inset


\end_layout

\begin_layout Standard
These are not rheologies per se, but rather extra fields where ConMan saves
 the effective isotropic viscosity and components of the stress tensor.
 For pure viscous materials, the effective viscosity will be the same as
 the viscosity you supply.
 For yielding rheologies, the effective viscosity will change as the particle
 yields.
 These components needs a 
\family typewriter
MaterialPointsSwarm
\family default
, which in all of the sample input files is called 
\family typewriter
materialSwarm
\family default
.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
MaterialPointsSwarm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
none
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Viscous
\end_layout

\begin_layout Subsubsection
MaterialViscosity
\end_layout

\begin_layout Standard
This is the simplest rheology.
 There is only one variable, the viscosity 
\family typewriter
eta0
\family default
.
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
eta0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset LatexCommand label
name "sub:Frank-Kamenetskii"

\end_inset

Frank-Kamenetskii
\end_layout

\begin_layout Standard
This is a temperature-dependent viscosity
\begin_inset Formula \[
eta=eta0*\exp\left(-theta*T\right).\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
eta0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
theta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Yielding
\end_layout

\begin_layout Standard
Yielding rheologies are a bit more complicated.
 
\end_layout

\begin_layout Subsubsection
StrainWeakening
\end_layout

\begin_layout Standard
First you need to create a 
\family typewriter
StrainWeakening
\family default
 component.
 
\family typewriter
StrainWeakening
\family default
 is mainly used to define an initial distribution of strain in a material
 and to calculate the accumulated strain on each particle.
 To that end, it requires a number of parameters.
\end_layout

\begin_layout Description
TimeIntegrator This is the component used for time integration to accumulate
 strain.
 Given the standard components in Section 
\begin_inset LatexCommand ref
reference "sec:Basic-Components"

\end_inset

, this will be 
\family typewriter
timeIntegrator
\family default
.
\end_layout

\begin_layout Description
MaterialPointsSwarm This is the swarm of particles associated with this
 rheology.
 Given the standard components in Section 
\begin_inset LatexCommand ref
reference "sec:Basic-Components"

\end_inset

, this will be 
\family typewriter
materialSwarm
\family default
.
\end_layout

\begin_layout Description
healingRate With this parameter, accumulated strain can decrease.
 Specifically, the time derivative of accumulated strain becomes
\begin_inset Formula \[
\frac{\sigma_{yield}}{\eta}\left(\frac{\beta}{1-\beta}-healingRate\right),\]

\end_inset

 where 
\begin_inset Formula $\beta\equiv\sigma_{yield}/\sigma$
\end_inset

, 
\begin_inset Formula $\sigma_{yield}$
\end_inset

 is the yield stress, 
\begin_inset Formula $\sigma$
\end_inset

 is some measure of the current stress (e.g., the second invariant of the
 stress tensor), and 
\begin_inset Formula $\eta$
\end_inset

 is the isotropic viscosity.
 Note that the healing rate should be between 0 and 1.
\end_layout

\begin_layout Description
initialSofteningStrain The strain at which the material starts to yield.
\end_layout

\begin_layout Description
finalSofteningStrain The strain at which the material has fully yielded.
\end_layout

\begin_layout Description
initialDamageFraction The chance that an individual material particle will
 have a non-zero initial strain.
\end_layout

\begin_layout Description
initialDamageWaveNumber The wavenumber for the initial random strain.
 To avoid having initial strain on the edges of the box, this should be
 set to the inverse of the horizontal length of the box.
\end_layout

\begin_layout Description
initialDamageFactor The maximum initial random strain for a particle is
\newline

\family typewriter
initialDamageFactor
\family default
*
\family typewriter
softeningStrain
\family default
.
 
\end_layout

\begin_layout Description
randomSeed A random number seed used when computing which particles are
 initially strained.
\end_layout

\begin_layout Description
initialStrainShape If defined, the initial random strain will only occur
 within this shape (outside the shape the initial random strain will be
 zero).
\end_layout

\begin_layout Standard
You can also define a strain weakening ratio 
\begin_inset Formula $\alpha\equiv\min\left(1,\gamma/\gamma_{softening}\right)$
\end_inset

, where 
\begin_inset Formula $\gamma$
\end_inset

 is the accumulated strain, and 
\begin_inset Formula $\gamma_{softening}$
\end_inset

 is the softening strain.
 This allows us to define quantities like the effective cohesion 
\begin_inset Formula $C_{effective}\equiv C_{pristine}\left(1-\alpha\right)+C_{yielded}\alpha$
\end_inset

 and effective friction coefficient 
\begin_inset Formula $\phi_{effective}=\phi_{pristine}\left(1-\alpha\right)+\phi_{yielded}\alpha$
\end_inset

.
\newline

\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TimeIntegrator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
none
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
MaterialPointsSwarm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
none
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
healingRate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
initialsofteningStrain
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
finalsofteningStrain
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $\infty$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
initialDamageFraction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
initialDamageWaveNumber
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-1.0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
initialDamageFactor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1.0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
randomSeed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
initialStrainShape
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
none
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset LatexCommand label
name "sub:VonMises"

\end_inset

VonMises
\end_layout

\begin_layout Standard
This is the simplest yielding rheology in ConMan.
 The yielding stress is simply the effective cohesion, so this rheology
 only has a few input parameters:
\end_layout

\begin_layout Itemize

\family typewriter
cohesion
\family default
 and 
\family typewriter
cohesionAfterSoftening
\family default
 have the obvious meanings.
 
\end_layout

\begin_layout Itemize

\family typewriter
minimumYieldStress
\family default
 sets an absolute minimum to the stress required to make the material yield.
\end_layout

\begin_layout Itemize

\family typewriter
StrainRateSoftening
\family default
 is a Boolean variable that changes how the constitutive matrix is modified
 when the material has yielded.
 If 
\family typewriter
StrainRateSoftening
\family default
 is 
\family typewriter
True
\family default
, then the viscosity is set to 
\begin_inset Formula \[
\eta_{effective}=2\sigma_{yield}^{2}\eta/\left(\sigma_{yield}^{2}+I_{2}^{2}\right),\]

\end_inset

 where 
\begin_inset Formula $I_{2}$
\end_inset

 is the second invariant of the stress tensor.
 Otherwise the viscosity is set to
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \[
\eta_{effective}=\eta\sigma_{yield}/I_{2},\]

\end_inset

 which essentially sets the stress of the particle to the yield stress.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
cohesion
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
cohesionAfterSoftening
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
minimumYieldStress
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
StrainRateSoftening
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
DruckerPrager
\end_layout

\begin_layout Standard
This rheology uses the same parameters as Von Mises, but also adds a friction
 coefficient that can soften.
 Specifically, the yield stress becomes
\begin_inset Formula \[
\sigma_{yield}=\alpha p+C_{p},\]

\end_inset

where 
\begin_inset Formula \[
\begin{array}{ccc}
C_{p} & = & \frac{6C_{effective}\cos\phi_{effective}}{\sqrt{3}\left(3-\sin\phi_{effective}\right)}\\
\alpha & = & \frac{6\sin\phi_{effective}}{\sqrt{3}\left(3-\sin\phi_{effective}\right)}\end{array},\]

\end_inset

and 
\begin_inset Formula $p$
\end_inset

 is the pressure.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
frictionCoefficient
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
frictionCoefficientAfterSoftening
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
See also Section 
\begin_inset LatexCommand ref
reference "sub:VonMises"

\end_inset

.
\end_layout

\begin_layout Subsubsection
MohrCoulomb
\end_layout

\begin_layout Standard
This rheology is like Drucker-Prager, but it uses the actual normal stress
 instead of inferring a normal stress from the pressure.
 More explicitly, the yield shear stress is 
\begin_inset Formula \[
\sigma_{yield}=\sigma_{n}\tan\phi_{effective}+C_{effective}.\]

\end_inset

 When the material is yielding, the viscosity is modified so that the stress
 on the particle is the yield stress.
 Note that 
\family typewriter
minimumYieldStress
\family default
 is interpreted differently.
 If it is zero (the default), then actual minimum yield stress will be the
 effective cohesion.
 This is because there tends to be numerical problems when using a very
 small minimum yield stress under tension.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
cohesion
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
cohesionAfterSoftening
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
frictionCoefficient
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
frictionCoefficientAfterSoftening
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
minimumYieldStress
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0 (see above)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
FaultingMoresiMulhaus2006
\end_layout

\begin_layout Standard
This is a fairly complicated non-isotropic rheology.
 The full details can be found in Moresi and Mülhaus (2006) 
\begin_inset LatexCommand cite
key "Moresi faulting"

\end_inset

, but essentially it keeps track of which direction a material is strained.
 To do so, it uses a component called 
\family typewriter
Director
\family default
.
 For the standard components given in Section 
\begin_inset LatexCommand ref
reference "sec:Basic-Components"

\end_inset

, this would be
\end_layout

\begin_layout LyX-Code
<struct name="director">
\end_layout

\begin_layout LyX-Code
  <param name="Type">Director</param>
\end_layout

\begin_layout LyX-Code
  <param name="TimeIntegrator">timeIntegrator</param>
\end_layout

\begin_layout LyX-Code
  <param name="VelocityGradientsField">VelocityGradientsField</param>
\end_layout

\begin_layout LyX-Code
  <param name="MaterialPointsSwarm">materialSwarm</param>
\end_layout

\begin_layout LyX-Code
  <param name="initialDirectionX">0.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="initialDirectionY">1.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="initialDirectionZ">0.0</param>
\end_layout

\begin_layout LyX-Code
  <param name="dontUpdate">True</param>
\end_layout

\begin_layout LyX-Code
</struct>
\end_layout

\begin_layout Standard
Otherwise, it adds one variable not present in 
\family typewriter
MohrCoulomb
\family default
: 
\family typewriter
ignoreOldOrientation
\family default
.
 This tells ConMan whether it should check to see whether material will
 weaken further in the current direction, or if it should try every direction
 equally each time step.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Defaults
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
cohesion
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
cohesionAfterSoftening
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
frictionCoefficient
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
frictionCoefficientAfterSoftening
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
minimumYieldStress
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ignoreOldOrientation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
Output File Format
\begin_inset LatexCommand label
name "cha:Output-File-Format"

\end_inset


\end_layout

\begin_layout Standard
ConMan outputs four types of files.
 
\end_layout

\begin_layout Section
VTK Files: 
\family typewriter
.vts, .pvts, .vtu, and .pvtu
\family default
 (Visualization)
\begin_inset LatexCommand label
name "sec:.vtk-Files-(Visualization)"

\end_inset


\end_layout

\begin_layout Standard
These files are output by the 
\family typewriter
Underworld_VTKOutput
\family default
 plugin.
 The 
\family typewriter
.vts
\family default
 and 
\family typewriter
.pvts
\family default
 files contain information about quantities on the grid, and the 
\family typewriter
.vtu
\family default
 and 
\family typewriter
.pvtu
\family default
 contain information about quantities on the particles.
 Every processor outputs its own 
\family typewriter
.vts
\family default
 and 
\family typewriter
.vtu 
\family default
file, and the 
\family typewriter
.pvts
\family default
 and 
\family typewriter
.pvtu
\family default
 are small files that have information on how to stitch them all together.
 Ordinarily, you would only open the 
\family typewriter
.pvts
\family default
 and 
\family typewriter
.pvtu
\family default
 files.
 These files are in a format understood by a wide variety of visualization
 programs, such as 
\begin_inset LatexCommand htmlurl
name "ParaView"
target "paraview.org"

\end_inset

 (recommended) or 
\begin_inset LatexCommand htmlurl
name "MayaVi"
target "mayavi.sf.net"

\end_inset

.
 
\begin_inset LatexCommand htmlurl
name "Visit"
target "www.llnl.gov/visit"

\end_inset

 can understand the raw 
\family typewriter
.vts
\family default
 and 
\family typewriter
.vtu
\family default
 files, but not the 
\family typewriter
.pvtu
\family default
 and 
\family typewriter
.pvts
\family default
 files.
 So Visit is mostly useful for visualizing serial runs.
\end_layout

\begin_layout Standard
The 
\family typewriter
Underworld_VTKOutput
\family default
 plugin is activated by adding the line
\end_layout

\begin_layout LyX-Code
    <param>Underworld_VTKOutput</param> 
\end_layout

\begin_layout Standard
to the list of plugins.
 This line is already in the example input files.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:.dat-ASCII-Files"

\end_inset


\family typewriter
.dat
\family default
 ASCII Files
\end_layout

\begin_layout Standard
The first type are ASCII files with 
\family typewriter
.dat
\family default
 extensions.
 Inside each 
\family typewriter
.dat
\family default
 file are several columns of data.
 For example, 
\family typewriter
PressureField.00001.dat
\family default
 might have
\end_layout

\begin_layout LyX-Code

\family typewriter
0 0.0312539624080715 0.0109361134145122 0 -9.81467103200287
\end_layout

\begin_layout LyX-Code

\family typewriter
1 0.0937630718938361 0.0109356986189374 0 17.7373201951569
\end_layout

\begin_layout LyX-Code

\family typewriter
2 0.156270066350344 0.0109368543031399 0 -37.0281780188199
\end_layout

\begin_layout LyX-Code

\family typewriter
3 0.218780947570009 0.0109343376815161 0 45.6263762140766
\end_layout

\begin_layout LyX-Code

\family typewriter
4 0.28128858838265 0.010937987088561 0 -65.2132484518426 
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout Standard
The first column (0,1,2,3, ...) is the node number, and the second, third,
 and fourth columns are the x, y, and z coordinates (2D runs still have
 z data that can be ignored).
 The last column(s) show the value.
 The five different types of variables and the order of components are
\end_layout

\begin_layout Description
Scalar Value
\end_layout

\begin_layout Description
Vector 2D: x y
\newline
3D: x, y, z
\end_layout

\begin_layout Description
Tensor 2D: xx, xy, yx, yy
\newline
3D: xx, xy, xz, yx, yy, yz, zx, zy, zz
\end_layout

\begin_layout Description
Symmetric\InsetSpace ~
Tensor 2D: xx, yy, xy
\newline
3D: xx, yy, zz, xy, xz, yz
\end_layout

\begin_layout Description
AntiSymmetric\InsetSpace ~
Tensor 2D: xx, xy, yx, yy
\newline
3D: xx, xy, xz, yx, yy, yz, zx, zy,
 zz (note that xx, yy, and zz are identical to zero)
\end_layout

\begin_layout Standard
The complete list of output files per time step with the default components
 (see Section 
\begin_inset LatexCommand ref
reference "sec:Basic-Components"

\end_inset

) is
\end_layout

\begin_layout Description
Scalar Pressure, StrainRateInvariant, VelocityMagnitude, VelocityGradientsInvari
ant
\end_layout

\begin_layout Description
Vector Velocity
\end_layout

\begin_layout Description
Tensor VelocityGradients
\end_layout

\begin_layout Description
Symmetric\InsetSpace ~
Tensor StrainRate
\end_layout

\begin_layout Description
Antisymmetric\InsetSpace ~
Tensor Vorticity
\end_layout

\begin_layout Standard
There will also be a timeInfo file, which records the start time and step
 size for that time step.
 So to get the time at the end of the step, you need to add the two numbers.
 The materialSwarm files are described in Section 
\begin_inset LatexCommand ref
reference "sec:.dat-Binary-Files"

\end_inset

.
 Finally, there will be 
\family typewriter
.txt
\family default
 files from 
\family typewriter
DumpSwarm
\family default
, explained below in Section 
\begin_inset LatexCommand ref
reference "sec:.txt-Files-(Particle"

\end_inset

.
\end_layout

\begin_layout Section

\family typewriter
.dat
\family default
 Binary Files 
\begin_inset LatexCommand label
name "sec:.dat-Binary-Files"

\end_inset


\end_layout

\begin_layout Standard
These are the 
\family typewriter
materialSwarm.*.dat
\family default
 files.
 They are only useful for checkpointing and have a machine dependent format.
\end_layout

\begin_layout Section

\family typewriter
.txt
\family default
 Files 
\begin_inset LatexCommand label
name "sec:.txt-Files-(Particle"

\end_inset


\end_layout

\begin_layout Standard
These files are output by the 
\family typewriter
Underworld_DumpSwarm
\family default
 plugin.
 They provide particle information in a more friendly format than the .dat
 binary files.
 The 
\family typewriter
Underworld_DumpSwarm
\family default
 plugin is activated by adding the line
\end_layout

\begin_layout LyX-Code
    <param>Underworld_DumpSwarm</param> 
\end_layout

\begin_layout Standard
to the list of plugins.
 This line is already in the example input files.
 The default is to output the ASCII files 
\family typewriter
particles.*.txt
\family default
.
 The format of the file is
\end_layout

\begin_layout LyX-Code

\size small
m x y z yielded viscosity density alpha diffusivity stress_xx stress_xy
 stress_yy
\end_layout

\begin_layout Standard
in 2D and 
\end_layout

\begin_layout LyX-Code

\size small
m x y z yielded viscosity density alpha diffusivity stress_xx stress_xy
 stress_xz stress_yy
\newline
stress_yz stress_zz
\end_layout

\begin_layout Standard
in 3D.
 In that file, 
\family typewriter
m
\family default
 is a unique number for the material, 
\family typewriter
yielded
\family default
 is a number between 
\family typewriter
0
\family default
 and 
\family typewriter
1
\family default
 indicating how much a material point has failed, 
\family typewriter
viscosity
\family default
 is the material's isotropic viscosity, 
\family typewriter
density
\family default
 is the material's density, 
\family typewriter
alpha
\family default
 is the material's coefficient of thermal expansivity, 
\family typewriter
diffusivity
\family default
 is the material thermal diffusivity, and 
\family typewriter
stress
\family default
 is the components of the stress at that material point.
 If the material does not yield (e.g., is purely viscous), then yielded is
 always zero.
 
\end_layout

\begin_layout Standard
You can also output in csv format for easily reading the data into a spreadsheet
 like Excel.
 To do this, set the variable 
\family typewriter
outputFormat
\family default
 in the global list of variables
\end_layout

\begin_layout LyX-Code
<param name="outputFormat">csv</param>
\end_layout

\begin_layout Standard
If you want to print out some other property of the material, e.g., non-isotropic
 viscosity, modify 
\family typewriter
DumpSwarm
\family default
 to provide that information.
 The source for the plugin is found in the directory
\end_layout

\begin_layout LyX-Code
src/Underworld/plugins/Output/DumpSwarm/
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Chapter
License 
\end_layout

\begin_layout Standard

\series bold
GNU GENERAL PUBLIC LICENSE Version 2, June 1991.
 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
\series default
 
\newline

\series medium
Everyone is permitted to copy and distribute verbatim copies of this license
 document, but changing it is not allowed.
\end_layout

\begin_layout Section*
Preamble
\end_layout

\begin_layout Standard
The licenses for most software are designed to take away your freedom to
 share and change it.
 By contrast, the GNU General Public License is intended to guarantee your
 freedom to share and change free software -- to make sure the software
 is free for all its users.
 This General Public License applies to most of the Free Software Foundation's
 software and to any other program whose authors commit to using it.
 (Some other Free Software Foundation software is covered by the GNU Library
 General Public License instead.) You can apply it to your programs, too.
\end_layout

\begin_layout Standard
When we speak of free software, we are referring to freedom, not price.
 Our General Public Licenses are designed to make sure that you have the
 freedom to distribute copies of free software (and charge for this service
 if you wish), that you receive source code or can get it if you want it,
 that you can change the software or use pieces of it in new free programs;
 and that you know you can do these things.
\end_layout

\begin_layout Standard
To protect your rights, we need to make restrictions that forbid anyone
 to deny you these rights or to ask you to surrender the rights.
 These restrictions translate to certain responsibilities for you if you
 distribute copies of the software, or if you modify it.
\end_layout

\begin_layout Standard
For example, if you distribute copies of such a program, whether gratis
 or for a fee, you must give the recipients all the rights that you have.
 You must make sure that they, too, receive or can get the source code.
 And you must show them these terms so they know their rights.
\end_layout

\begin_layout Standard
We protect your rights with two steps:
\end_layout

\begin_layout Enumerate
Copyright the software, and 
\end_layout

\begin_layout Enumerate
Offer you this license which gives you legal permission to copy, distribute
 and/or modify the software.
\end_layout

\begin_layout Standard
Also, for each author's protection and ours, we want to make certain that
 everyone understands that there is no warranty for this free software.
 If the software is modified by someone else and passed on, we want its
 recipients to know that what they have is not the original, so that any
 problems introduced by others will not reflect on the original authors'
 reputations.
\end_layout

\begin_layout Standard
Finally, any free program is threatened constantly by software patents.
 We wish to avoid the danger that redistributors of a free program will
 individually obtain patent licenses, in effect making the program proprietary.
 To prevent this, we have made it clear that any patent must be licensed
 for everyone's free use or not licensed at all.
 
\end_layout

\begin_layout Standard
The precise terms and conditions for copying, distribution and modification
 follow.
\end_layout

\begin_layout Section*
GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION
 AND MODIFICATION 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
item[0.]
\end_layout

\end_inset

This License applies to any program or other work which contains a notice
 placed by the copyright holder saying it may be distributed under the terms
 of this General Public License.
 The "Program" below refers to any such program or work, and a "work based
 on the Program" means either the Program or any derivative work under copyright
 law: that is to say, a work containing the Program or a portion of it,
 either verbatim or with modifications and/or translated into another language.
 (Hereinafter, translation is included without limitation in the term "modificat
ion.") Each licensee is addressed as "you."
\newline

\newline
Activities other than copying,
 distribution and modification are not covered by this License; they are
 outside its scope.
 The act of running the Program is not restricted, and the output from the
 Program is covered only if its contents constitute a work based on the
 Program (independent of having been made by running the Program).
 Whether that is true depends on what the Program does.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
You may copy and distribute verbatim copies of the Program's source code
 as you receive it, in any medium, provided that you conspicuously and appropria
tely publish on each copy an appropriate copyright notice and disclaimer
 of warranty; keep intact all the notices that refer to this License and
 to the absence of any warranty; and give any other recipients of the Program
 a copy of this License along with the Program.
 
\end_layout

\begin_deeper
\begin_layout Standard
You may charge a fee for the physical act of transferring a copy, and you
 may at your option offer warranty protection in exchange for a fee.
 
\end_layout

\end_deeper
\begin_layout Enumerate
You may modify your copy or copies of the Program or any portion of it,
 thus forming a work based on the Program, and copy and distribute such
 modifications or work under the terms of Section 1 above, provided that
 you also meet all of these conditions: 
\end_layout

\begin_deeper
\begin_layout Enumerate
You must cause the modified files to carry prominent notices stating that
 you changed the files and the date of any change.
 
\end_layout

\begin_layout Enumerate
You must cause any work that you distribute or publish, that in whole or
 in part contains or is derived from the Program or any part thereof, to
 be licensed as a whole at no charge to all third parties under the terms
 of this License.
 
\end_layout

\begin_layout Enumerate
If the modified program normally reads commands interactively when run,
 you must cause it, when started running for such interactive use in the
 most ordinary way, to print or display an announcement including an appropriate
 copyright notice and a notice that there is no warranty (or else, saying
 that you provide a warranty) and that users may redistribute the program
 under these conditions, and telling the user how to view a copy of this
 License.
 (Exception: if the Program itself is interactive but does not normally
 print such an announcement, your work based on the Program is not required
 to print an announcement.) 
\end_layout

\begin_layout Standard
These requirements apply to the modified work as a whole.
 If identifiable sections of that work are not derived from the Program,
 and can be reasonably considered independent and separate works in themselves,
 then this License, and its terms, do not apply to those sections when you
 distribute them as separate works.
 But when you distribute the same sections as part of a whole which is a
 work based on the Program, the distribution of the whole must be on the
 terms of this License, whose permissions for other licensees extend to
 the entire whole, and thus to each and every part regardless of who wrote
 it.
 
\end_layout

\begin_layout Standard
Thus, it is not the intent of this section to claim rights or contest your
 rights to work written entirely by you; rather, the intent is to exercise
 the right to control the distribution of derivative or collective works
 based on the Program.
 
\end_layout

\begin_layout Standard
In addition, mere aggregation of another work not based on the Program with
 the Program (or with a work based on the Program) on a volume of a storage
 or distribution medium does not bring the other work under the scope of
 this License.
 
\end_layout

\end_deeper
\begin_layout Enumerate
You may copy and distribute the Program (or a work based on it, under Section
 2) in object code or executable form under the terms of Sections 1 and
 2 above provided that you also do one of the following: 
\end_layout

\begin_deeper
\begin_layout Enumerate
Accompany it with the complete corresponding machine-readable source code,
 which must be distributed under the terms of Sections 1 and 2 above on
 a medium customarily used for software interchange; or, 
\end_layout

\begin_layout Enumerate
Accompany it with a written offer, valid for at least three years, to give
 any third party, for a charge no more than your cost of physically performing
 source distribution, a complete machine-readable copy of the corresponding
 source code, to be distributed under the terms of Sections 1 and 2 above
 on a medium customarily used for software interchange; or, 
\end_layout

\begin_layout Enumerate
Accompany it with the information you received as to the offer to distribute
 corresponding source code.
 (This alternative is allowed only for noncommercial distribution and only
 if you received the program in object code or executable form with such
 an offer, in accord with Subsection b above.) 
\end_layout

\begin_layout Standard
The source code for a work means the preferred form of the work for making
 modifications to it.
 For an executable work, complete source code means all the source code
 for all modules it contains, plus any associated interface definition files,
 plus the scripts used to control compilation and installation of the executable.
 However, as a special exception, the source code distributed need not include
 anything that is normally distributed (in either source or binary form)
 with the major components (compiler, kernel, and so on) of the operating
 system on which the executable runs, unless that component itself accompanies
 the executable.
\end_layout

\begin_layout Standard
If distribution of executable or object code is made by offering access
 to copy from a designated place, then offering equivalent access to copy
 the source code from the same place counts as distribution of the source
 code, even though third parties are not compelled to copy the source along
 with the object code.
 
\end_layout

\end_deeper
\begin_layout Enumerate
You may not copy, modify, sublicense, or distribute the Program except as
 expressly provided under this License.
 Any attempt otherwise to copy, modify, sublicense or distribute the Program
 is void, and will automatically terminate your rights under this License.
 However, parties who have received copies, or rights, from you under this
 License will not have their licenses terminated so long as such parties
 remain in full compliance.
 
\end_layout

\begin_layout Enumerate
You are not required to accept this License, since you have not signed it.
 However, nothing else grants you permission to modify or distribute the
 Program or its derivative works.
 These actions are prohibited by law if you do not accept this License.
 Therefore, by modifying or distributing the Program (or any work based
 on the Program), you indicate your acceptance of this License to do so,
 and all its terms and conditions for copying, distributing or modifying
 the Program or works based on it.
 
\end_layout

\begin_layout Enumerate
Each time you redistribute the Program (or any work based on the Program),
 the recipient automatically receives a license from the original licensor
 to copy, distribute or modify the Program subject to these terms and conditions.
 You may not impose any further restrictions on the recipients' exercise
 of the rights granted herein.
 You are not responsible for enforcing compliance by third parties to this
 License.
 
\end_layout

\begin_layout Enumerate
If, as a consequence of a court judgment or allegation of patent infringement
 or for any other reason (not limited to patent issues), conditions are
 imposed on you (whether by court order, agreement or otherwise) that contradict
 the conditions of this License, they do not excuse you from the conditions
 of this License.
 If you cannot distribute so as to satisfy simultaneously your obligations
 under this License and any other pertinent obligations, then as a consequence
 you may not distribute the Program at all.
 For example, if a patent license would not permit royalty-free redistribution
 of the Program by all those who receive copies directly or indirectly through
 you, then the only way you could satisfy both it and this License would
 be to refrain entirely from distribution of the Program.
\end_layout

\begin_deeper
\begin_layout Standard
If any portion of this section is held invalid or unenforceable under any
 particular circumstance, the balance of the section is intended to apply
 and the section as a whole is intended to apply in other circumstances.
\end_layout

\begin_layout Standard
It is not the purpose of this section to induce you to infringe any patents
 or other property right claims or to contest validity of any such claims;
 this section has the sole purpose of protecting the integrity of the free
 software distribution system, which is implemented by public license practices.
 Many people have made generous contributions to the wide range of software
 distributed through that system in reliance on consistent application of
 that system; it is up to the author/donor to decide if he or she is willing
 to distribute software through any other system and a licensee cannot impose
 that choice.
 
\end_layout

\begin_layout Standard
This section is intended to make thoroughly clear what is believed to be
 a consequence of the rest of this License.
 
\end_layout

\end_deeper
\begin_layout Enumerate
If the distribution and/or use of the Program is restricted in certain countries
 either by patents or by copyrighted interfaces, the original copyright
 holder who places the Program under this License may add an explicit geographic
al distribution limitation excluding those countries, so that distribution
 is permitted only in or among countries not thus excluded.
 In such case, this License incorporates the limitation as if written in
 the body of this License.
 
\end_layout

\begin_layout Enumerate
The Free Software Foundation may publish revised and/or new versions of
 the General Public License from time to time.
 Such new versions will be similar in spirit to the present version, but
 may differ in detail to address new problems or concerns.
 
\end_layout

\begin_deeper
\begin_layout Standard
Each version is given a distinguishing version number.
 If the Program specifies a version number of this License which applies
 to it and "any later version," you have the option of following the terms
 and conditions either of that version or of any later version published
 by the Free Software Foundation.
 If the Program does not specify a version number of this License, you may
 choose any version ever published by the Free Software Foundation.
\end_layout

\end_deeper
\begin_layout Enumerate
If you wish to incorporate parts of the Program into other free programs
 whose distribution conditions are different, write to the author to ask
 for permission.
 For software which is copyrighted by the Free Software Foundation, write
 to the Free Software Foundation; we sometimes make exceptions for this.
 Our decision will be guided by the two goals of preserving the free status
 of all derivatives of our free software and of promoting the sharing and
 reuse of software generally.
 
\end_layout

\begin_layout Subsection*
NO WARRANTY 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
item[11.]
\end_layout

\end_inset

BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR
 THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
 EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
 PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
 EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH
 YOU.
 SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
 SERVICING, REPAIR OR CORRECTION.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
item[12.]
\end_layout

\end_inset

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL
 ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE
 THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING
 ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF
 THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
 THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
 EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY
 OF SUCH DAMAGES.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
END OF TERMS AND CONDITIONS 
\end_layout

\begin_layout Subsection*
How to Apply These Terms to Your New Programs
\end_layout

\begin_layout Standard
If you develop a new program, and you want it to be of the greatest possible
 use to the public, the best way to achieve this is to make it free software
 which everyone can redistribute and change under these terms.
 
\end_layout

\begin_layout Standard
To do so, attach the following notices to the program.
 It is safest to attach them to the start of each source file to most effectivel
y convey the exclusion of warranty; and each file should have at least the
 "copyright" line and a pointer to where the full notice is found.
 For example:
\end_layout

\begin_layout Quote
One line to give the program's name and a brief idea of what it does.
 Copyright 
\size footnotesize
© (
\size default
year) (name of author) 
\end_layout

\begin_layout Quote
This program is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the Free
 Software Foundation; either version 2 of the License, or (at your option)
 any later version.
 
\end_layout

\begin_layout Quote
This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
 
\end_layout

\begin_layout Quote
You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
\end_layout

\begin_layout Standard
Also add information on how to contact you by electronic and paper mail.
 
\end_layout

\begin_layout Standard
If the program is interactive, make it output a short notice like this when
 it starts in an interactive mode: 
\end_layout

\begin_layout Quote
Gnomovision version 69, Copyright © year name of author Gnomovision comes
 with ABSOLUTELY NO WARRANTY; for details type `show w'.
 This is free software, and you are welcome to redistribute it under certain
 conditions; type `show c' for details.
 
\end_layout

\begin_layout Standard
The hypothetical commands `show w' and `show c' should show the appropriate
 parts of the General Public License.
 Of course, the commands you use may be called something other than `show
 w' and `show c'; they could even be mouse-clicks or menu items -- whatever
 suits your program.
 
\end_layout

\begin_layout Standard
You should also get your employer (if you work as a programmer) or your
 school, if any, to sign a "copyright disclaimer" for the program, if necessary.
 Here is a sample; alter the names: 
\end_layout

\begin_layout Quote
Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovisi
on' (which makes passes at compilers) written by James Hacker.
 
\end_layout

\begin_layout Quote
(signature of Ty Coon)
\newline
1 April 1989 
\newline
Ty Coon, President of Vice 
\end_layout

\begin_layout Standard
This General Public License does not permit incorporating your program into
 proprietary programs.
 If your program is a subroutine library, you may consider it more useful
 to permit linking proprietary applications with the library.
 If this is what you want to do, use the GNU Library General Public License
 instead of this License.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "1"
key "Fullsack"

\end_inset

Fullsack, Phillipe (1995).
 An arbitrary Lagrangian-Eulerian formulation for creeping flows and its
 application in tectonic models, 
\emph on
Geophys.
 J.
 Int., 120
\emph default
, 1-23.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "2"
key "VPAC"

\end_inset

Quenette, S., B.
 Appelbe, M.
 Gurnis, L.
 Hodkinson, L.
 Moresi, and P.
 Sunter (2005), An Investigation into Design for Performance and Code Maintainab
ility in High Performance Computing, 
\emph on
ANZIAM J
\emph default
.
\emph on
, 46(e),
\emph default
 C1001-C1016.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "3"
key "Underworld"

\end_inset

Moresi, L.N., F.
 Dufour, and H.-B.
 Mühlhaus (2003), A Lagrangian integration point finite element method for
 large deformation modeling of viscoelastic geomaterials, 
\emph on
J.
 Comp.
 Phys., 184
\series bold
,
\series default
\emph default
 476-497.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "4"
key "Moresi faulting"

\end_inset

Moresi, L.N., and H.-B.
 Mühlhaus (2006), Anisotropic viscous models of large-deformation MohrCoulomb
 failure, 
\emph on
Philosophical Magazine, 86,
\emph default
 3287-3305.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "5"
key "Uzawa"

\end_inset

 Moresi, L.N., and V.S.
 Solomatov (1995), Numerical investigation of 2D convection with extremely
 large viscosity variations, 
\emph on
Phys.
 Fluids,
\emph default
 
\emph on
7(9),
\emph default
 2154-2162.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "6"
key "Ellipsis"

\end_inset

O'Neill, C., Moresi, L., Müller, D., Albert, R., Dufour, F.
 (2006), Ellipsis 3D: a particle-in-cell finite element hybrid code for
 modelling mantle convection and lithospheric deformation, 
\shape italic
Computers & Geosciences
\shape default
, 
\shape italic
32(10)
\shape default
, 1769-1779.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "7"
key "Citcom"

\end_inset

Zhong, S., M.T.
 Zuber, L.N.
 Moresi, and M.
 Gurnis (2000), The role of temperature-dependent viscosity and surface
 plates in spherical shell models of mantle convection, 
\shape italic
J.
 Geophys.
 Res.
\shape default
, 
\shape italic
105
\shape default
, 11,063-11,082.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "8"
key "Clast"

\end_inset

Schmid, D.W., and Y.Y.
 Podladchikov (2003), Analytical solutions for deformable elliptical inclusions
 in general shear, 
\shape italic
Geophys.
 J.
 Int.
\shape default
, 
\shape italic
155
\shape default
, 269-288.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "9"
key "Landau & Lifschitz"

\end_inset

 Landau, L.D., and E.M.
 Lifshitz (1987), 
\emph on
Fluid Mechanics
\emph default
, Pergamon Press, 61-62.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "10"
key "Folds"

\end_inset

 Johnson, A.M., and R.C.
 Fletcher (1994), 
\emph on
Folding of Viscous Layers
\emph default
, Columbia University Press, 19.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "11"
key "Buiter et al Numerical Sandbox"

\end_inset

Buiter, Susanne J.H., and Andrey Yu.
 Babeyko, Susan Ellis, Taras V.
 Gerya, Boris J.P.
 Kaus, Antje Kellner, Guido Schreurs, and Yasuhiro Yamada (2006), The numerical
 sandbox: comparison of model results for a shortening and an extension
 experiment, in 
\emph on
Analogue and Numerical Modelling of Crustal-Scale Processes
\emph default
, vol.
 253, edited by S.J.H Buiter and G.
 Schreurs, pp.
 29-64, Geological Society, London, Special Publications, doi: 10.1144/GSL.SP.2006.2
53.01.02.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "12"
key "Stokes Sphere"

\end_inset

Lindgren, E.R.
 (1999), The Motion of a Sphere in an Incompressible Viscous Fluid at Reynolds
 Numbers Considerably Less Than One, in 
\shape italic
Physica Scriptae
\shape default
, 
\shape italic
60
\shape default
, 97-110
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "13"
key "FD Stokes"

\end_inset

 Deubelbeiss, Yolanda, and Boris J.P.
 Kaus (2007), A comparison of finite difference formultions for the Stokes
 equations in presence of strongly varying viscosity, poster presented at
 2007 AGU.
\end_layout

\end_body
\end_document
