#LyX 1.5.1 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{hyperref}

\let\myUrl\url
\renewcommand{\url}[1]{(\myUrl{#1})}
\end_preamble
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\noindent
\align center

\color none
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename images/conman_cover.pdf
	width 75page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Title
ConMan
\end_layout

\begin_layout Author
© California Institute of Technology
\newline
Scott King
\newline
Version 2.0
\end_layout

\begin_layout Date
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
raggedbottom
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Chapter
Preface
\end_layout

\begin_layout Section
Abstract
\end_layout

\begin_layout Standard
This documents serves as a users’ guide for ConMan, a vectorized finite
 element program for the solution of the equations of incompressible, infinite-P
randtl number convection in twodimensions written by Arthur Raefsky and
 Scott King at Caltech.
 ConMan is a public domain program and is distributed free of charge to
 anyone who wishes to use it and may be freely copied and modified.
 ConMan is written in Standard Fortran 77 and runs under Unix and Unicos
 operating systems.
 Porting it to other systems should be straightforward.
 As with anything free it comes with no guarantees, but it has been benchmarked
 against other existing codes.
 The authors would appreciate any information regarding bugs or potential
 problems but make no promises regarding the timeliness of changes or fixes.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This manual contains all of the necessary information for setting up input
 and running ConMan.
 It assumes some familiarity with the finite element method and Fortran.
 An excellent reference book for more detail on the finite element method
 is 
\emph on
The finite element method
\emph default
 by T.J.R.
 Hughes.
 All of the data structures and bookkeeping arrays in ConMan follow the
 conventions in Hughes so for the person who wishes to make extensive use
 of ConMan, this book is a worthwhile investment.
 
\end_layout

\begin_layout Standard
This manual is broken up into several parts: it begins with a brief introduction
 to the finite element method and the notation that is used throughout the
 manual and ConMan.
 There is a discussion of the equations solved and the material properties
 including how and where to modify the code.
 There is also discussion of the vectorization strategy and finally a descriptio
n of all the input variables.
 Within this document the following convention will be followed: subroutine
 names from ConMan will be given in 
\series bold
bold
\series default
 type, variables from ConMan will be given in 
\emph on
italicized
\emph default
 type, and important points or potential traps will be noted with 
\end_layout

\begin_layout Quote
\begin_inset Formula $\clubsuit$
\end_inset

 This is an important point 
\end_layout

\begin_layout Standard
Questions and problems can be addressed to 
\begin_inset LatexCommand url
name "Scott King"
target "scott@jsun.ucsd.edu"

\end_inset

.
\end_layout

\begin_layout Section
Citation
\end_layout

\begin_layout Standard
Computational Infrastructure for Geodynamics (CIG) is making this source
 code available to you in the hope that the software will enhance your research
 in geophysics.
 The ConMan code was donated to CIG in June 2008.
 A number of individuals have contributed a significant portion of their
 careers toward the development of ConMan.
 It is essential that you recognize these individuals in the normal scientific
 practice by making appropriate acknowledgements.
 
\end_layout

\begin_layout Standard
The code is based on the method described in 
\end_layout

\begin_layout Itemize
Moresi, L.N., F.
 Dufour, and H.-B.
 Mühlhaus (2003), A Lagrangian integration point finite element method for
 large deformation modeling of viscoelastic geomaterials, 
\emph on
J.
 Comp.
 Phys., 184
\series bold
,
\series default
\emph default
 476-497.
 
\end_layout

\begin_layout Standard
The code was originally developed by Scott King.
 The ConMan team requests that in your oral presentations and in your papers
 that you indicate your use of this code and acknowledge the author of the
 code and 
\begin_inset LatexCommand htmlurl
name "CIG"
target "www.geodynamics.org"

\end_inset

.
\end_layout

\begin_layout Section
Support
\end_layout

\begin_layout Standard
ConMan maintenance is supported by a grant from the National Science Foundation
 to CIG, managed by the California Institute of Technology, under Grant
 No.
 EAR-0406751.
 
\end_layout

\begin_layout Standard
Any opinions, findings, and conclusions or recommendations expressed in
 this material are those of the author and do not necessarily reflect the
 views of the National Science Foundation.
 
\end_layout

\begin_layout Chapter
Computational Approach and Governing Equations
\end_layout

\begin_layout Section
The Finite Element Method
\end_layout

\begin_layout Standard
In general, the finite element method takes a differential equation (strong
 form) and transforms it into an integral equation (weak form).
 For example, the strong form of this simple equation is stated as follows:
\end_layout

\begin_layout Standard
Given 
\begin_inset Formula $f\left(x\right):\left[0,1\right]$
\end_inset

 
\begin_inset Formula $\rightarrow\Re$
\end_inset

 and constants 
\emph on
g
\emph default
 and 
\emph on
h
\emph default
, find 
\begin_inset Formula $u:\left[0,1\right]\rightarrow\Re$
\end_inset

, such that
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
u,_{xx}\left(x\right)+f\left(x\right)=0\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
u\left(1\right)=g\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
-u,_{x}\left(0\right)=h\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The weak form of the corresponding boundary value problem is stated: 
\end_layout

\begin_layout Standard
Given 
\emph on
f
\emph default
, 
\emph on
g
\emph default
 and 
\emph on
h
\emph default
, as before.
 Find 
\begin_inset Formula $u\left(x\right)\epsilon\mathcal{L}$
\end_inset

 such that for all 
\begin_inset Formula $w\left(x\right)\epsilon\nu$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\intop_{0}^{1}w,_{x}\left(x\right)u,_{x}\left(x\right)=\intop_{0}^{1}w\left(x\right)f\left(x\right)dx+w\left(0\right)h\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\nu$
\end_inset

 is the set of weighting functions defined by 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\nu=\left\{ w\left(x\right)|w\left(x\right)\epsilon H^{1},\, w\left(1\right)=0\right\} \label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and 
\begin_inset Formula $\mathcal{L}$
\end_inset

 is a set of trial solutions defined by 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\mathcal{L=\left\{ \mathrm{\mathit{u\left(x\right)|u\left(x\right)}\epsilon H^{1},\,\mathit{u}\left(1\right)=\mathit{g}}\right\} }\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $H^{1}$
\end_inset

 is the set of all functions whose first derivatives are square integrable
 on [0, 1].
 The integral equation is then solved by integrating over each element in
 the domain and adding the result.
 The result is a large sparse matrix equation of the form 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\left[K\right]x=b\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\emph on
[K]
\emph default
 is referred to as the element stiffness matrix.
 There will be more to say about the implementation in Section 4.
 TODO-ref for section
\end_layout

\begin_layout Standard
There are two domains to keep in mind when thinking about the finite element
 method: the global domain and the parent element domain (Figure 
\begin_inset LatexCommand ref
reference "fig:Figure-1"

\end_inset

).
 All calculations are done in the parent element domain and the results
 are assembled into the global equations.
 This means all calculations can be done for a single parent element.
 Elements of different sizes or shapes filling an irregular global domain
 geometry (i.e., non-rectangular) can be solved by the same program.
 The only difference between these elements is the Jacobian of the transformatio
n between the input domain and the parent element domain, which is calculated
 in routine 
\series bold
genshg
\series default
.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Figure-1"

\end_inset

The mapping between the global domain (right) and the parent element domain
 (left) using the shape functions.
 Figure taken from Hughes, Sec 3.2.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/conman-fig1.png
	scale 45

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For ConMan the choice was made to use bilinear quadrilaterals as the parent
 elements (Figure 
\begin_inset LatexCommand ref
reference "fig:Figure-2"

\end_inset

).
 Higher order elements (i.e., biquadratic or bicubic-spline) require more
 computational work per element.
 It has been our experience that using grid refinement, rather than using
 high-order elements, is the best strategy for an efficient, accurate code
 for incompressible, advection-diffusion problems.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
The bilinear shape function for a single element (top) and the four elements
 whose shape functions combine to form the global shape function for node
 A (bottom).
 Figure taken from Hughes, Sec 3.2.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/conman-fig2.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because of the changing between domains, it is necessary to define several
 bookkeeping arrays to identify nodes and elements in each of the domains.
 
\end_layout

\begin_layout Description
id transforms global nodes to equation numbers (Figure 
\begin_inset LatexCommand ref
reference "fig:Example-relationship-between"

\end_inset

).
 
\end_layout

\begin_layout Description
ien transforms element local node numbers to global node numbers (Figure
 
\begin_inset LatexCommand ref
reference "fig:4-Example-relationship-between"

\end_inset

).
 
\end_layout

\begin_layout Description
lm transforms element local node numbers to global equation numbers.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Example-relationship-between"

\end_inset

 Example relationship between global nodes and equation numbers for a 2
 degree of freedom problem using the id array.
 An equation number of zero denotes a boundary condition.
 Figure taken from Hughes, Sec 3.2.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/conman-fig3.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With these, the code is able to go back and forth between the parent element
 domain and the global domain.
 Global node numbering is specified by the user, and equation numbers are
 assigned by the code to denote the row in the stiffness matrix corresponding
 to the degree(s) of freedom for that node.
 One global node may have more than one equation number (since there may
 be more than one degree of freedom per node).
 Boundary conditions are specified with a zero equation number.
 Since it is a sparse matrix, it is desirable to permute the stiffness matrix
 for computational efficiency.
 These arrays spare the user from dealing with the transformations, while
 making the code efficient.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:4-Example-relationship-between"

\end_inset

Example relationship between global node numbers and local element numbers
 using the ien array.
 Local nodes are numbered counterclockwise from the bottom left hand corner.
 Figure taken from Hughes, Sec 3.2.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/conman-fig4.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the code, the data structures for these two arrays are 
\end_layout

\begin_layout Description

\family roman
id ( degree-of-freedom , global-node-number ) = equation-number 
\end_layout

\begin_layout Description

\family roman
ien ( local-node-number, element-number ) = global-node-number 
\end_layout

\begin_layout Description

\family roman
lm ( degree-of-freedom, local-node-number, element-number ) = global-equation-nu
mber 
\end_layout

\begin_layout Subsection
Equations
\end_layout

\begin_layout Standard
The equations for incompressible convection (in dimensionless form) are
 the equations of momentum
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\nabla^{2}u=-\nabla p+Ra\theta\hat{k}\label{eq:momentum}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
continuity 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\nabla\cdot u=0\label{eq:continuity}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and energy 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula \begin{equation}
\frac{\partial\theta}{\partial t}=u\cdot\nabla\theta+\nabla^{2}\theta+H\label{eq:energy}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\emph on
u
\emph default
 is the dimensionless velocity, 
\begin_inset Formula $\theta$
\end_inset

 is the dimensionless temperature, 
\emph on
p
\emph default
 is the dimensionless pressure, 
\begin_inset Formula $\hat{k}$
\end_inset

 is the unit vector in the vertical direction, 
\emph on
H
\emph default
 is the heat source term, and 
\emph on
t
\emph default
 is the dimensionless time.
 In this form, all the material properties are combined into one dimensionless
 parameter, the Rayleigh number, given by 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
Ra=\frac{g\alpha\Delta Td^{3}}{\kappa\mu}\label{eq:Raleigh number}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\emph on
g
\emph default
 is the acceleration due to gravity, 
\begin_inset Formula $\alpha$
\end_inset

 is the coefficient of thermal expansion, 
\begin_inset Formula $\Delta T$
\end_inset

 is the temperature drop across the box, 
\emph on
d
\emph default
 is the depth of the box, 
\begin_inset Formula $\kappa$
\end_inset

 is the thermal diffusivity, and 
\emph on
µ 
\emph default
is the dynamic viscosity.
\end_layout

\begin_layout Standard
The momentum and energy equations form a simple coupled system of differential
 equations.
 We treat the incompressibility equation as a constraint on the momentum
 equation and enforce incompressibility in the solution of the momentum
 equation using a penalty formulation described below.
 Since the temperatures provide the buoyancy (body force) to drive the momentum
 equation and since there is no time-dependence in the momentum equation,
 the algorithm to solve the system is a simple one: Given an initial temperature
 field, calculate the resulting velocity field.
 Use the velocities to advect the temperatures for the next time step and
 solve for a new temperature field.
 If the time stepping for the temperature equation is stable, then this
 method is stable and converges as 
\begin_inset Formula $\Delta t\rightarrow0$
\end_inset

.
 
\end_layout

\begin_layout Standard
The momentum equation is solved using the penalty method to enforce incompressib
ility.
 The formal statement of the problem is as follows: 
\end_layout

\begin_layout Standard
Given: 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
f:\Omega\rightarrow\Re^{n}\,\,\,\,\,\, body\, force\, vector\label{eq:body force vector}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
g:\Gamma_{g}\rightarrow\Re^{n}\,\,\,\,\,\, imposed\, velocity\, vector\label{eq:imposed velocity vector}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
h:\Gamma_{h}\rightarrow\Re^{n}\,\,\,\,\,\, imposed\, traction\, vector\label{eq:imposed traction vector}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\Gamma$
\end_inset

 is the boundary of the domain 
\begin_inset Formula $\Omega$
\end_inset

.
 
\begin_inset Formula $\Gamma_{g}$
\end_inset

 and 
\begin_inset Formula $\Gamma_{h}$
\end_inset

 are the parts of the boundary where velocities and tractions are specified.
 
\end_layout

\begin_layout Standard
Find 
\begin_inset Formula $u:\Omega\rightarrow\Re^{n}$
\end_inset

 and 
\begin_inset Formula $p:\Omega\rightarrow\Re$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
t_{ij,j}+f_{i}=0\,\,\,\,\,\, on\,\Omega\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
u_{i,i}=0\,\,\,\,\,\, on\,\Omega\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
u_{i}=g_{i}\,\,\,\,\,\, on\,\,\Gamma_{g}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
t_{ij}n_{j}=h_{i}\,\,\,\,\,\, on\,\,\Gamma_{h}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
with the constitutive equation for a Newtonian fluid 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
t_{ij}=-p\delta_{ij}+2\mu u_{\left(i,j\right)}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $t_{ij}$
\end_inset

 denotes the Cauchy stress tensor, 
\emph on
p
\emph default
 is the pressure, 
\begin_inset Formula $\delta_{ij}$
\end_inset

 is the Kronecker delta and 
\begin_inset Formula $u_{(i,j)}=(u_{i,j}+u_{j,i})/2$
\end_inset

.
 
\end_layout

\begin_layout Standard
In the penalty formulation, the above is replaced by 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
t_{ij}^{\left(\lambda\right)}=-p^{\left(\lambda\right)}\delta_{ij}+2\mu u_{\left(i,j\right)}^{\left(\lambda\right)}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
p^{\left(\lambda\right)}=-\lambda u_{i,j}^{\left(\lambda\right)}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and 
\begin_inset Formula $\lambda$
\end_inset

 is the penalty parameter (repeated subscripts means summation over all
 indices).
\end_layout

\begin_layout Standard
This formulation automatically enforces incompressibility since the solution
 converges to the incompressible stokes equation as 
\begin_inset Formula $\lambda$
\end_inset

 approaches infinity (Temam, 1977).
 Also, the unknown pressure field is eliminated.
 This is quite useful not only because the amount of computational work
 is decreased because no pressure equation is solved, but also because it
 eliminates the need to create artificial boundary conditions for the pressure
 equation.
 There are no pressure boundary conditions in the formal specification of
 the problem.
 By examining the equation we see that the role of pressure is to balance
 the system, so physically the penalty formulation makes sense.
 
\end_layout

\begin_layout Standard
The equation is cast in the weak form and the Galerkin formulation (i.e.,
 the weighting functions are the same as the basis functions) is used to
 solve the weak form of the equation.
 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
V=\left\{ w\epsilon H^{1}|w=0\,\,\,\,\,\, on\,\,\Gamma_{g}\right\} \label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard

\emph on
V
\emph default
 is the set of all weighting functions 
\emph on

\begin_inset Formula $w$
\end_inset


\emph default
 which vanish on the boundary.
 Similarly 
\begin_inset Formula $V^{h}$
\end_inset

 is a subset of 
\emph on
V
\emph default
 parameterized by 
\emph on
h
\emph default
, the mesh parameter.
 Let 
\begin_inset Formula $g^{h}$
\end_inset

 denote an approximation of 
\begin_inset Formula $g$
\end_inset

 which converges to 
\begin_inset Formula $g$
\end_inset

 as 
\begin_inset Formula $h\rightarrow0$
\end_inset

.
 
\end_layout

\begin_layout Standard
Find 
\begin_inset Formula $u^{h}=w^{h}+g^{h},w^{h}\epsilon V^{h},$
\end_inset

 such that for all 
\begin_inset Formula $\bar{w}^{h}\epsilon V^{h}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\int_{\Omega}\left(\lambda w_{j,j}\bar{w}_{i,i}+2\mu w_{i,j}\bar{w}_{i,j}\right)=\int_{\Omega}f_{i}\bar{w_{i}^{h}d\Omega}+\int_{\Gamma_{h}}h_{i}\bar{w_{i}^{h}d\Omega}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
-\int_{\Omega}\left(\lambda g_{j,j}^{h}\bar{w}_{i,i}+2\mu g_{\left(i,j\right)}^{h}\bar{w}_{\left(i,j\right)}^{h}\right)d\Omega\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
w_{i}^{h}=\sum N_{A}u_{iA}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
u_{iA}=u_{i}\left(x_{A}\right)\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $N_{A}$
\end_inset

 is the shape function for node A for the element.
 
\end_layout

\begin_layout Standard
The element stiffness matrix (Figure 
\begin_inset LatexCommand ref
reference "fig:5-The-element-stiffness"

\end_inset

) is made up of the two terms from the left hand side of the integral equation.
 The integration is done using two by two gauss quadrature, which is exact
 when the elements are rectangular and bilinear shape functions are used.
 The 
\begin_inset Formula $\lambda$
\end_inset

 term is under-integrated (one point rule) to keep the large penalty value
 from effectively locking the element (Malkus and Hughes, 1978).
 The right hand side is made up of three known parts, the body force term
 ( 
\begin_inset Formula $f_{i}$
\end_inset

 ), the applied tractions ( 
\begin_inset Formula $h_{i}$
\end_inset

 ) and the applied velocities ( 
\begin_inset Formula $g_{i}$
\end_inset

 ).
 The momentum equation is equivalent to an incompressible elastic problem,
 and the resulting stiffness matrix will always be positive definite (Hughes,
 1986 p.
 84-89).
 This allows us to consider only the upper triangular part of the stiffness
 matrix and save both storage and operations using Cholesky factorization.
 More details of the method and a formal error analysis can be found in
 Hughes, Liu and Brooks (1979).
 
\end_layout

\begin_layout Standard
The stiffness matrix is formed in routine 
\series bold
f_vstf
\series default
 and the right hand side is formed in routine 
\series bold
f_tres
\series default
.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
\begin_inset LatexCommand label
name "fig:5-The-element-stiffness"

\end_inset

The element stiffness matrix for the 2D Cartesian stokes equation.
 The 8 by 8 matrix is make up of 16 2 by 2 submatrices of the form shown
 below.
 The 
\begin_inset Formula $\lambda$
\end_inset

 and 
\begin_inset Formula $\mu$
\end_inset

 parts are shown separately for clarity.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/conman-fig5.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The energy equation is an advection-diffusion equation.
 The formal statement is
\end_layout

\begin_layout Standard
Find 
\begin_inset Formula $T:\Omega\rightarrow R$
\end_inset

 such that 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\dot{T}+u_{i}T_{,i}=\kappa T_{,ii}+H\,\,\,\,\,\, on\,\,\Omega\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
T=b\,\,\,\,\,\, on\,\,\Gamma_{b}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
T_{,j}n_{j}=q\,\,\,\,\,\, on\,\,\Gamma_{q}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $T$
\end_inset

 is the temperature, 
\begin_inset Formula $u_{i}$
\end_inset

 is the velocity, 
\begin_inset Formula $\kappa$
\end_inset

 is the thermal diffusivity and 
\begin_inset Formula $H$
\end_inset

 is the internal heat source.
 The weak form of the energy equation is given by
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\int_{\Omega}\left(w+p\right)\dot{T}d\Omega=-\int_{\Omega}\left(w+p\right)\left(u_{i}T_{,i}\right)d\Omega\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
-\kappa\int_{\Omega}w_{,i}T_{,i}d\Omega+\int_{\Gamma_{q}}wT_{,j}n_{j}d\Gamma_{q}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\dot{T}$
\end_inset

 is the time derivative of temperature, 
\begin_inset Formula $T_{,i}$
\end_inset

 is the gradient of temperature, 
\begin_inset Formula $w$
\end_inset

 is the standard weighting function and 
\begin_inset Formula $\left(w+p\right)$
\end_inset

 is the Petrov-Galerkin weighting function with p, the discontinuous streamline
 upwind part of the Petrov-Galerkin weighting function, given by
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
p=\tau u\nabla T=\tilde{k}\frac{u_{i}w_{,i}}{||u||^{2}}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The energy equation is solved using Petrov-Galerkin weighting functions
 on the internal heat source and advective terms to correct for the under-diffus
ion and remove the oscillations which would result from the standard Galerkin
 method for an advection dominated problem (Hughes and Brooks, 1977).
 The Petrov-Galerkin function can be thought of as a standard Galerkin method
 in which we counterbalance the numerical underdiffusion by adding an artificial
 diffusivity of the form
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\left(\xi u_{\xi}h_{\xi}+\eta u_{\eta}h_{\eta}\right)/2\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
with 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\xi=1-\frac{2\kappa}{u_{\xi}h_{\xi}}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\eta=1-\frac{2\kappa}{u_{\eta}h_{\eta}}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $h_{\xi}$
\end_inset

 and 
\begin_inset Formula $h_{\eta}$
\end_inset

 are the element lengths and 
\begin_inset Formula $u_{\xi}$
\end_inset

 and 
\begin_inset Formula $u_{\eta}$
\end_inset

 are the velocities in the local element coordinate system (
\begin_inset Formula $\xi$
\end_inset

 
\begin_inset Formula $\eta$
\end_inset

 system) evaluated at the element center.
 This form of discretization has no crosswind diffusion because the “artificial
 diffusion” acts only in the direction of the flow (i.e., it follows the streamlin
e), hence the name Streamline Upwind Petrov-Galerkin (SUPG).
 This makes it a better approximation than straight upwinding and it has
 been demonstrated to be more accurate than Galerkin or straight upwinding
 in advection dominated problems (Hughes and Brooks, 1977).
 It has recently been shown that the SUPG method is one of a broader class
 of methods for advection-diffusion equations referred to as Galerkin/Least-Squa
res methods (Hughes et al., 1988).
\end_layout

\begin_layout Standard
The resulting matrix equation is not symmetric, but since the energy equation
 only has one degree of freedom per node, while the momentum equation has
 two or three, the storage for the energy equation is small compared to
 the momentum equation.
 Since we use an explicit time stepping method, the energy equation is not
 implemented in matrix form.
 The added cost of calculating the Petrov-Galerkin weighting functions is
 much less than the cost of using a refined grid with the Galerkin method.
 The Galerkin method requires a finer grid then the Petrov-Galerkin method
 to achieve stable solutions (Travis et al., 1989).
 Time stepping in the energy equation is done using an explicit predictor-correc
tor algorithm.
 The form of the predictor-corrector algorithm is 
\end_layout

\begin_layout Standard
Predict: 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
T_{n+1}^{\left(0\right)}=T_{n}+\Delta t\left(1-\alpha\right)\dot{T}_{n}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\dot{T}_{n=1}^{\left(0\right)}=0\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Solve: 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
M^{*}\Delta\dot{T}_{n+1}^{\left(i\right)}=R_{n+1}^{\left(i\right)}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
R_{n+1}^{\left(i\right)}=-\left[\dot{T}_{n+1}^{\left(i\right)}+u\cdot\left(T_{n+1}^{\left(i\right)}\right),x\right]\left(w+p\right)-\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\tilde{k}w_{,x}\left(T_{n+1}^{\left(i\right)}\right),x+\,\,\,\left(boundary\, condition\, terms\right)\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Correct: 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
T_{n+1}^{\left(i+1\right)}=T_{n+1}^{\left(i\right)}+\Delta t\alpha\dot{T}_{n+1}^{\left(i\right)}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\dot{T}_{n+1}^{\left(i+1\right)}=\dot{T}_{n+1}^{\left(i\right)}+\Delta\dot{T}_{n+1}^{\left(i\right)}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $i$
\end_inset

 is the iteration number (for the corrector), 
\begin_inset Formula $n$
\end_inset

 is the time step number, 
\begin_inset Formula $T$
\end_inset

 is the temperature, 
\begin_inset Formula $\dot{T}$
\end_inset

 is the derivative of temperature with time, 
\begin_inset Formula $\Delta\dot{T}$
\end_inset

 is the correction to the temperature derivative for the iteration, 
\begin_inset Formula $M^{*}$
\end_inset

 is the lumped mass matrix, 
\begin_inset Formula $R_{n+1}^{\left(i\right)}$
\end_inset

 is the residual term, 
\begin_inset Formula $\Delta t$
\end_inset

 is the time step and 
\begin_inset Formula $\alpha$
\end_inset

 is a convergence parameter.
 Note that in the explicit formulation 
\begin_inset Formula $M^{*}$
\end_inset

 is diagonal.
 
\end_layout

\begin_layout Standard
The time step is dynamically chosen, and corresponds to the Courant time
 step (the largest step that can be taken explicitly and maintain stability).
 With the appropriate choice of variables, 
\begin_inset Formula $\alpha$
\end_inset

 = 0.5 and two iterations, the method is second order accurate (Hughes, 1986,
 p.
 562-566).
 
\end_layout

\begin_layout Standard
The predict step is done in routine 
\series bold
timdrv
\series default
, the residual 
\begin_inset Formula $R$
\end_inset

 is formed in routine 
\series bold
f_tres
\series default
, 
\begin_inset Formula $M^{*}$
\end_inset

 is formed in routine 
\series bold
tmass
\series default
, and the correct step is also done in 
\series bold
f_tres
\series default
.
\end_layout

\begin_layout Chapter
Implementation
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
ConMan was designed to take advantage of machines capable of vector instructions.
 Hence thoughout the code, operations which would be performed on an individual
 element on a scalar machine are grouped together so that they can be performed
 on a group of elements.
 This is transparent to the user and requires only a small modification
 to the program style and data structure.
 The only unfortunate side effect of this operation is that the arrays of
 element quantities (e.g., 
\emph on
ien, lm, evisc
\emph default
) are now shuffled to avoid vector recurrences.
 Consider Figure 
\begin_inset LatexCommand ref
reference "fig:6-The-four-surrounding"

\end_inset

, a small rectangular grid with one degree of freedom per node.
 When assembling the equation for global degree of freedom 5 (marked N),
 there is a contribution from elements 1, 2, 3 and 4 (circled).
 This is updated as follows:
\end_layout

\begin_layout LyX-Code
DO E=1,NUMEL 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
(localize data) 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
(form local stiffness matrix in LOCAL)
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
DO N=1,4 
\end_layout

\begin_layout LyX-Code
GLOBAL( LM(E,N) ) = GLOBAL( LM(E,N) ) + LOCAL(N) 
\end_layout

\begin_layout LyX-Code
ENDDO 
\end_layout

\begin_layout LyX-Code
ENDDO
\end_layout

\begin_layout Standard
where 
\family typewriter
E
\family default
 is the element number, 
\family typewriter
N
\family default
 is the local node number, 
\family typewriter
LOCAL(N)
\family default
 is the value being assembled for element 
\family typewriter
E
\family default
 and local node 
\family typewriter
N
\family default
 and 
\family typewriter
GLOBAL
\family default
 is the equation for the global node.
 Now the task is to assemble m elements, 
\begin_inset Formula $e_{1},\ldots,e_{m}$
\end_inset

, at one time, making sure that no global node is updated twice.
 This can be accomplished if for all elements, 
\begin_inset Formula $e_{1},\ldots,e_{m}$
\end_inset

, lm
\begin_inset Formula $\left(e_{a},\mathrm{n}\right)$
\end_inset

 is not equal to lm
\begin_inset Formula $\left(e_{b},\mathrm{n}\right)$
\end_inset

 for 
\begin_inset Formula $e_{a}$
\end_inset

 and 
\begin_inset Formula $e_{b}$
\end_inset

 in 
\begin_inset Formula $e_{1},\ldots,e_{m}$
\end_inset

.
 Also since the innermost loops are the vectorizable loops, we unroll the
 
\family typewriter
N
\family default
 loop over the local nodes.
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
\end_layout

\begin_layout LyX-Code
(loop over all blocks) 
\end_layout

\begin_layout LyX-Code
.
\end_layout

\begin_layout LyX-Code
.
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
(localize a block of data)
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
(form a block of local stiffness matrices in LOCAL) 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
.
 
\end_layout

\begin_layout LyX-Code
DO IV=1,NVEC 
\end_layout

\begin_layout LyX-Code
IVEL=IV+IEL-1 
\end_layout

\begin_layout LyX-Code
GLOBAL( LM(IVEL,1) ) = GLOBAL( LM(IVEL,1) ) + LOCAL(IV,1) 
\end_layout

\begin_layout LyX-Code
GLOBAL( LM(IVEL,2) ) = GLOBAL( LM(IVEL,2) ) + LOCAL(IV,2) 
\end_layout

\begin_layout LyX-Code
GLOBAL( LM(IVEL,3) ) = GLOBAL( LM(IVEL,3) ) + LOCAL(IV,3) 
\end_layout

\begin_layout LyX-Code
GLOBAL( LM(IVEL,4) ) = GLOBAL( LM(IVEL,4) ) + LOCAL(IV,4) 
\end_layout

\begin_layout LyX-Code
ENDDO
\end_layout

\begin_layout Standard

\family typewriter
NVEC
\family default
 elements at a time can be processed, and the array 
\family typewriter
LOCAL
\family default
 must be of length 
\family typewriter
NVEC
\family default
 by 4.
 Notice that the 
\family typewriter
NUMEL
\family default
 elements have been broken up into groups 
\family typewriter
NVEC
\family default
 long with 
\family typewriter
IEL
\family default
 marking the first element in the group (see Figure 
\begin_inset LatexCommand ref
reference "fig:7-A-representation-of"

\end_inset

).
 The shuffling of the elements is done in routine 
\series bold
genshp
\series default
, and the variables in the code (
\emph on
iel, nvec, iv, ivel
\emph default
) are the same as described above.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:6-The-four-surrounding"

\end_inset

The four surrounding elements (1, 2, 3 and 4 circled) all contribute to
 the global equation 5.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/conman-fig6.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:7-A-representation-of"

\end_inset

A representation of the storage of array LM, which is NUMEL by 4 long.
 The NUMEL elements are broken up into groups of length NVEC for vector
 processing.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/conman-fig7.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Formula $\clubsuit$
\end_inset

 In 
\emph on
common.h
\emph default
 the parameter 
\emph on
lvec
\emph default
 sets the maximum length of the vectors.
 It is usually wise to set this to the length of the vector registers on
 the machine (64 for Cray, 128 for Convex).
 
\end_layout

\begin_layout Quote
\begin_inset Formula $\clubsuit$
\end_inset

 If a length greater than 128 is used, then the size of the commons 
\emph on
temp1
\emph default
 and 
\emph on
tempx
\emph default
 must be changed in routine flow.
 
\end_layout

\begin_layout Standard
The element stiffness matrix for the stokes equation is always upper triangular.
 Since 
\emph on
NVEC
\emph default
 matrices at a time are formed, to save storage only the upper triangular
 part is stored (36 entries instead of 64 for 8 by 8 matrix).
 The numbering scheme for the storage is shown in Figure 
\begin_inset LatexCommand ref
reference "fig:8-The-storage-for"

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:8-The-storage-for"

\end_inset

The storage for the stiffness matrix used in routine 
\series bold
f_vstf
\series default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/conman-fig8.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Material Properties
\end_layout

\begin_layout Standard
As discussed above, the equations in dimensionless form have one dimensionless
 parameter, the Rayleigh number.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
Ra=\frac{g\alpha\Delta Td^{3}}{\kappa\mu}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $g$
\end_inset

 is the acceleration due to gravity, 
\begin_inset Formula $\alpha$
\end_inset

 is the coefficient of thermal expansion, 
\begin_inset Formula $\Delta T$
\end_inset

 is the temperature drop across the box, 
\begin_inset Formula $d$
\end_inset

 is the depth of the box, 
\begin_inset Formula $\kappa$
\end_inset

 is the thermal diffusivity, and 
\begin_inset Formula $\mu$
\end_inset

 is the dynamic viscosity.
 In ConMan, the input parameter is the buoyancy part of the Rayleigh number.
 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
Ra_{buoy}=g\alpha\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The depth, 
\begin_inset Formula $d$
\end_inset

, and the temperature difference, 
\begin_inset Formula $\Delta T$
\end_inset

 are specified from the grid and the temperature boundary conditions.
 
\begin_inset Formula $\kappa$
\end_inset

 and 
\begin_inset Formula $\mu$
\end_inset

 are separate input parameters.
 If the depth, temperature difference, 
\begin_inset Formula $\kappa$
\end_inset

 and 
\begin_inset Formula $\mu$
\end_inset

 are set to 1, then the buoyancy number, 
\begin_inset Formula $RA_{buoy}$
\end_inset

, and the Rayleigh number, 
\begin_inset Formula $Ra$
\end_inset

, are the same.
 
\end_layout

\begin_layout Standard
The viscosity can be a function of temperature and/or depth.
 This is done in routine 
\series bold
rheol
\series default
.
 The user can easily modify the functional form for specific problems.
 The default functional form is 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\mu\left(T,Z\right)=\mu_{o}\left\{ \exp\left\{ \frac{E^{*}+V^{*}z}{T+T_{o}}\right\} -\exp\left\{ \frac{E^{*}+V^{*}z}{1+T_{o}}\right\} \right\} \label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\mu_{o}$
\end_inset

 is the preexponential viscosity, 
\begin_inset Formula $E^{*}$
\end_inset

 is the activation energy, 
\begin_inset Formula $V^{*}$
\end_inset

 is the activation volume, 
\begin_inset Formula $T_{o}$
\end_inset

 is the temperature offset, 
\begin_inset Formula $T$
\end_inset

 is the temperature and 
\begin_inset Formula $z$
\end_inset

 is the depth.
 
\begin_inset Formula $\mu_{o},\, E^{*},\, V^{*},$
\end_inset

 and 
\begin_inset Formula $T_{o}$
\end_inset

 are all input in the material section.
\end_layout

\begin_layout Standard
Internal heating can be specified through the internal heating parameter.
 If no bottom temperature is specified the Rayleigh number becomes 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
Ra=\frac{g\alpha Hd^{5}}{k\kappa\mu}\label{eq:}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $H$
\end_inset

 is the internal heating parameter and 
\begin_inset Formula $k$
\end_inset

 is the thermal conductivity.
 The grid can have multiple material groups, each with its own set of material
 properties.
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Standard
ConMan comes ready to run with a Unicos makefile.
 The file 
\series bold
Makefile
\series default
 contains the system calls for the compiler and the loader, FC and LD respective
ly.
 These need to be changed for your machine.
 Also the calls to 
\series bold
second
\series default
, a Cray timing routine, will have to be changed in routine 
\series bold
timer
\series default
.
 To run ConMan on a 32 bit machine, each routine needs to have the comment
 in front of the line with ``implicit double precision'' removed.
 In routine 
\series bold
intemp
\series default
 the functions 
\emph on
cos
\emph default
 and 
\emph on
sin
\emph default
 need to be changed to 
\emph on
dcos
\emph default
 and 
\emph on
dsin
\emph default
.
 Also, in routine pickdt the functions abs and amin need to be changed to
 dabs and dmin.
 Some compilers have automatic options to force reals to be real*8, so check
 your manual.
\end_layout

\begin_layout Section
Building from Source
\end_layout

\begin_layout Subsection
System Requirements [WEI -- thought you might need this.
 Or else delete]
\end_layout

\begin_layout Standard
ConMan works on a variety of computational platforms and has been tested
 on workstations running 
\end_layout

\begin_layout Itemize
Mac OS X 10.4.6 (G4, G5, and Intel)
\end_layout

\begin_layout Itemize
Windows 2000 and XP SP2
\end_layout

\begin_layout Itemize
RedHat Fedora Core 5 (x86)
\end_layout

\begin_layout Itemize
OpenSuse 10.0 (x86)
\end_layout

\begin_layout Itemize
Gentoo (x86)
\end_layout

\begin_layout Itemize
Debian stable (x86 and AMD64), testing (x86), and unstable (x86)
\end_layout

\begin_layout Standard
ConMan has also been tested on clusters running Redhat 7.2 (x86) and RedHat
 Enterprise Linux 3 (EM64T).
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
In order to build ConMan, you must have the headers and development libraries
 for
\end_layout

\begin_layout Itemize
MPI
\end_layout

\begin_layout Itemize
PETSc 2.3.2
\end_layout

\begin_layout Itemize
libxml2
\end_layout

\begin_layout Standard
You must also have python 2.2.1 or greater installed.
 If you do not already have MPI, then in many cases PETSc can install a
 version for you.
 Installing PETSc also requires a Blas/Lapack implementation.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sec:Downloading-the-Code"

\end_inset

Downloading the Code
\end_layout

\begin_layout Standard
You can get the source for the latest release from the 
\begin_inset LatexCommand htmlurl
name "ConMan web page"
target "geodynamics.org/cig/software/packages/mc/conman/"

\end_inset

.
 In that tarball is the file INSTALL.
 For some platforms, there are platform-specific instructions.
 
\end_layout

\begin_layout Subsubsection
Source Code Repository (Experts Only)
\end_layout

\begin_layout Standard
Advanced users and software developers may be interested in downloading
 the latest ConMan source code directly from the CIG source code repository,
 instead of using the prepared source package.
 To check whether you have a subversion client installed on your machine,
 type:
\end_layout

\begin_layout LyX-Code
svn
\end_layout

\begin_layout Standard
You should get a response that looks something like this:
\end_layout

\begin_layout LyX-Code
Type `svn help' for usage.
\end_layout

\begin_layout Standard
Otherwise, you will need to download and install a Subversion client, available
 at the 
\begin_inset LatexCommand htmlurl
name "Subversion Website"
target "subversion.tigris.org/project_packages.html"

\end_inset

.
 Then the code can be checked out with the following command: 
\end_layout

\begin_layout LyX-Code
svn checkout http://geodynamics.org/svn/cig/mc/3D/ConMan/trunk ConMan
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Support
\end_layout

\begin_layout Standard
The primary point of support for ConMan is the 
\begin_inset LatexCommand url
name "CIG Mantle Convection Mailing List"
target "cig-mc@geodynamics.org"

\end_inset

.
 Feel free to send questions, comments, feature requests, and bugs to the
 list.
 The mailing list is archived at
\end_layout

\begin_layout LyX-Code
\begin_inset LatexCommand htmlurl
name "cig-mc Archives"
target "geodynamics.org/pipermail/cig-mc/"

\end_inset


\end_layout

\begin_layout Standard
You may also use the bug tracker
\end_layout

\begin_layout LyX-Code
\begin_inset LatexCommand htmlurl
name "Roundup"
target "geodynamics.org/roundup"

\end_inset


\end_layout

\begin_layout Standard
to submit bugs and requests for new features.
\end_layout

\begin_layout Chapter
Running ConMan
\end_layout

\begin_layout Section
Basic Usage
\end_layout

\begin_layout Standard
If you downloaded binaries for your platform, you can run the ConMan executable
 directly.
 For example,
\end_layout

\begin_layout LyX-Code
./ConMan-1_2_2  input/cookbook/yielding.xml
\end_layout

\begin_layout Standard
will output 
\end_layout

\begin_layout LyX-Code
TimeStep = 1, Start time = 0 + 0 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 2, Start time = 0 + 0.0107639 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 3, Start time = 0.0107639 + 0.0107105 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 4, Start time = 0.0214744 + 0.0106587 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 5, Start time = 0.0321332 + 0.0106059 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 6, Start time = 0.0427391 + 0.0105527 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 7, Start time = 0.0532918 + 0.0104996 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 8, Start time = 0.0637914 + 0.0104465 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 9, Start time = 0.0742378 + 0.0103941 prev timeStep dt
\end_layout

\begin_layout LyX-Code
TimeStep = 10, Start time = 0.0846319 + 0.0103424 prev timeStep dt 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
If you do not specify an input file, you will get an error like
\end_layout

\begin_layout LyX-Code

\size small
Error in _AbstractContext_New: The dictionary is empty, meaning no input
 parameters have been feed
\end_layout

\begin_layout LyX-Code

\size small
into your program.
 Perhaps you've forgot to pass any input files ( or command-line arguments
 ) in.
\end_layout

\begin_layout LyX-Code

\size small
ConMan: build/StGermain/Base/IO/src/Journal.c:603: Journal_Firewall: Assertion
 `expression' failed.
\end_layout

\begin_layout LyX-Code

\size small
p0_27845:  p4_error: interrupt SIGx: 6 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
If ConMan cannot find the file, you will get a different error:
\end_layout

\begin_layout LyX-Code

\size small
Error: File input/cookbook/yielding.xml doesn't exist, not readable, or not
 valid.
\end_layout

\begin_layout LyX-Code

\size small
ConMan: build/StGermain/Base/IO/src/Journal.c:603: Journal_Firewall: Assertion
 `expression' failed.
\end_layout

\begin_layout LyX-Code

\size small
p0_16810:  p4_error: interrupt SIGx: 6
\end_layout

\begin_layout Standard
Due to quirks in some implementations of MPI, you may have to specify the
 complete path to the input file (e.g., 
\family typewriter
./ConMan-1_2_2 /home/juser/ConMan/input/cookbook/yielding.xml
\family default
).
\end_layout

\begin_layout Standard
In general, ConMan does not have many defaults, so almost everything must
 be specified in the input file.
 For examples of how to create your own input files, see Chapter 
\begin_inset LatexCommand ref
reference "cha:Cookbooks"

\end_inset

.
 For a complete description of the input file format, see Appendix 
\begin_inset LatexCommand ref
reference "cha:Input-File-Format"

\end_inset

.
 
\end_layout

\begin_layout Standard
If you compile ConMan yourself, you can run it from where you installed
 it.
 If running in parallel on your own machine, prepend 
\family typewriter
mpirun
\family default
 or 
\family typewriter
mpiexec
\family default
 (depending on your local implementation of MPI).
 For example, if your computer has two processors, then
\end_layout

\begin_layout LyX-Code
mpirun -np 2 bin/ConMan /home/juser/ConMan/input/cookbook/yielding.xml
\end_layout

\begin_layout Standard
will use both processors.
\end_layout

\begin_layout Standard
The 
\family typewriter
yielding.xml
\family default
 example should run for 10 time steps and generate a great deal of output
 in the 
\family typewriter
output.template
\family default
 directory.
\end_layout

\begin_layout Section
Advanced Usage
\end_layout

\begin_layout Subsection
Direct Solvers
\end_layout

\begin_layout Standard
If you have a problem with strong viscosity gradients, the default solver
 (GMRES) may converge very slowly.
 Strong viscosity gradients occur when you start with materials with different
 viscosities (e.g., Appendix 
\begin_inset LatexCommand ref
reference "sec:Circular-Inclusion"

\end_inset

, 
\begin_inset LatexCommand ref
reference "sec:Falling-Sphere"

\end_inset

, and 
\begin_inset LatexCommand ref
reference "sec:Falling-Cylinder"

\end_inset

), or when materials yield (e.g., Appendix 
\begin_inset LatexCommand ref
reference "sec:Geomod-2004"

\end_inset

).
\end_layout

\begin_layout Standard
One solution is to use a direct solver instead of GMRES.
 PETSc has a facility where you can use command-line arguments to change
 the solver.
 For example, on a single machine, to use a direct LU solve, you only need
 to append arguments to the command line
\end_layout

\begin_layout LyX-Code
./ConMan-1_2_2  input/cookbook/yielding.xml -pc_type lu -ksp_type preonly
\end_layout

\begin_layout Standard
In parallel, the analogous approach would be to use Mumps, a parallel direct
 solver.
 You first need to make sure that your version of PETSc was installed with
 Mumps.
 If you built PETSc yourself, you need to add the option 
\begin_inset Quotes sld
\end_inset


\family typewriter
--download-mumps=yes
\family default

\begin_inset Quotes srd
\end_inset

 when configuring.
 The PETSc installation on TACC Lonestar has been installed with Mumps.
\end_layout

\begin_layout Standard
Once that is done, enabling it is again just appending a few arguments to
 the command line
\end_layout

\begin_layout LyX-Code
./ConMan-1_2_2  input/cookbook/yielding.xml mat_type aijmumps -ksp_type pre
 only -pc_type lu
\end_layout

\begin_layout Subsection
Command-Line Parameters
\end_layout

\begin_layout Standard
You can also change the default values of the input file without modifying
 that file by appending arguments.
 For example, to only change the number of time steps from the default value
 10 to value 20, use the following command
\end_layout

\begin_layout LyX-Code
./ConMan-1_2_2  input/cookbook/yielding.xml --maxTimeSteps=20
\end_layout

\begin_layout Standard
You can append any number of modified parameters in one unbroken line (here
 shown wrapped around)
\end_layout

\begin_layout LyX-Code

\size small
./ConMan-1_2_2  input/cookbook/yielding.xml --maxTimeSteps=20 --dim=3 --elementRes
I=64 
\newline
--elementResJ=64 --elementResK=64 --particlesPerCell=60 --dumpEvery=10
\end_layout

\begin_layout Chapter
\start_of_appendix
Input Guide
\end_layout

\begin_layout Standard
To run ConMan a series of eight file names are needed, some for input and
 some for output.
 Usually these are read from a runfile.
 The first two files are input files 
\series bold
input
\series default
 and 
\series bold
geom
\series default
 and are described in this section.
 The third file is an output file showing all the input parameters in a
 nace [typo for nice?] fancy form.
 The fourth and fifth files are an input temperature file (optional) and
 an output temperature file.
 These are for starting a new run from a previous run.
 The sixth file is a time series file (see routine 
\series bold
fluxke
\series default
), the seventh file is the coordinates, velocities and temperatures and
 the eighth file is for mean value calculations (see routine 
\series bold
mean
\series default
).
 These file names are read in routine 
\series bold
flow
\series default
.
 
\end_layout

\begin_layout Standard
The input for ConMan is read from two different FORTRAN units.
 The first unit, 
\series bold
iin
\series default
, contains the time stepping, output, and material parameters as well as
 element type information while the second unit, 
\series bold
igeom
\series default
, contains the coordinates, boundary values and connectivity information.
 For the UNIX and CRAY interfaces ConMan reads the file names to attach
 to these units from a file named ’runfile’: 
\series bold
iin
\series default
 is attached to the file named on the first line and 
\series bold
igeom
\series default
 is attached to the file named on the second line (names must be ASCII with
 a length less than 13 characters long).
 The input deck was broken up so that an automatic grid generating routine
 could be used to generate coordinates, boundary conditions and element
 connectivities separate from ConMan.
 The only automatic grid generation conman does is linear or bilinear interpolat
ion which is described in the appropriate sections of this guide.
\end_layout

\begin_layout Standard
The following sixteen cards or groups of cards are read from the 
\series bold
iin
\series default
 unit (throughout this guide a ``card'' will mean one line of an ASCII text
 file).
 These constitute the parameter part of the input ``deck'' for the program
 ConMan.
 The format for this guide is a 
\series bold
bold
\series default
 title line giving the card title followed by an 
\emph on
italicized
\emph default
 line showing the order of the parameters and a listing of the parameters
 (with a brief explanation).
 
\end_layout

\begin_layout Description
Title\InsetSpace ~
Card 
\emph on
Any descriptive character string up to 80 characters long
\end_layout

\begin_layout Description
Global\InsetSpace ~
Constants\InsetSpace ~
Card 
\emph on
numnp nsd ndof nelx nelz mprec iflow necho inrsts iorstr nodebn ntimvs ntseq
 numeg isky nwrap 
\end_layout

\begin_deeper
\begin_layout Description
numnp .
 .
 .
 .
 .
 .
 total number of nodal points 
\end_layout

\begin_layout Description
nsd .
 .
 .
 .
 .
 .
 .
 .
 number of spatial dimensions 
\end_layout

\begin_layout Description
ndof .
 .
 .
 .
 .
 .
 .
 number of degrees of freedom 
\end_layout

\begin_layout Description
nelx .
 .
 .
 .
 .
 .
 .
 number of elements in the x1 (horizontal) direction 
\end_layout

\begin_layout Description
nelz .
 .
 .
 .
 .
 .
 .
 number of elements in the x2 (vertical) direction 
\end_layout

\begin_layout Description
mprec .
 .
 .
 .
 .
 .
 precision flag 
\end_layout

\begin_deeper
\begin_layout Standard
1 - single 
\end_layout

\begin_layout Standard
2 - double 
\end_layout

\end_deeper
\begin_layout Description
iflow .
 .
 .
 .
 .
 .
 .
 data check flag 
\end_layout

\begin_deeper
\begin_layout Standard
0 - check data only 
\end_layout

\begin_layout Standard
1 - execute code 
\end_layout

\end_deeper
\begin_layout Description
necho .
 .
 .
 .
 .
 .
 echo data flag 
\end_layout

\begin_deeper
\begin_layout Standard
0 - minimum data echo (terse) 
\end_layout

\begin_layout Standard
1 - echo data to output file (verbose) 
\end_layout

\end_deeper
\begin_layout Description
inrstr .
 .
 .
 .
 .
 .
 .
 read restart file flag 
\end_layout

\begin_deeper
\begin_layout Standard
0 - use default start (conductive) 
\end_layout

\begin_layout Standard
1 - read restart file from unit 16 
\end_layout

\end_deeper
\begin_layout Description
iorstr .
 .
 .
 .
 .
 .
 .
 write restart file flag 
\end_layout

\begin_deeper
\begin_layout Standard
0 - don’t write restart file 
\end_layout

\begin_layout Standard
1 - write restart file to unit 17 
\end_layout

\end_deeper
\begin_layout Description
nodebn .
 .
 .
 .
 .
 .
 number of edge nodes for nusselt smoother 
\end_layout

\begin_layout Description
ntimvs .
 .
 .
 .
 .
 .
 temperature dependent viscosity flag 
\end_layout

\begin_deeper
\begin_layout Standard
0 - stiffness matrix factored once 
\end_layout

\begin_layout Standard
1 - stiffness matrix factored every time step 
\end_layout

\end_deeper
\begin_layout Description
ntseq .
 .
 .
 .
 .
 .
 .
 number of time sequences 
\end_layout

\begin_deeper
\begin_layout Standard
currently only one supported 
\end_layout

\end_deeper
\begin_layout Description
numeg .
 .
 .
 .
 .
 .
 number of element groups 
\end_layout

\begin_deeper
\begin_layout Standard
currently only one supported 
\end_layout

\end_deeper
\begin_layout Description
isky .
 .
 .
 .
 .
 .
 .
 flag for skyline factor 
\end_layout

\begin_deeper
\begin_layout Standard
0 - dmf solver (if supported) 
\end_layout

\begin_layout Standard
1 - regular skyline 
\end_layout

\end_deeper
\begin_layout Description
nwrap .
 .
 .
 .
 .
 .
 number of nodes to wrap 
\end_layout

\begin_deeper
\begin_layout Standard
equal to number of elements in vertical 
\end_layout

\begin_layout Standard
to use nodes must be numbered increasing 
\end_layout

\begin_layout Standard
fastest in vertical direction
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
Time\InsetSpace ~
Sequence\InsetSpace ~
Cards - ntseq cards 
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
nstep niter alpha delt epstol 
\end_layout

\begin_layout Description
nstep .
 .
 .
 .
 .
 .
 .
 number of time steps 
\end_layout

\begin_layout Description
niter .
 .
 .
 .
 .
 .
 .
 number of multicorrector iterations 
\end_layout

\begin_deeper
\begin_layout Standard
2 for explicit 2nd order 
\end_layout

\end_deeper
\begin_layout Description
alpha .
 .
 .
 .
 .
 .
 .
 multicorrector parameter 
\end_layout

\begin_deeper
\begin_layout Standard
0.5 for explicit 2nd order 
\end_layout

\end_deeper
\begin_layout Description
delt .
 .
 .
 .
 .
 .
 .
 time step (not used) 
\end_layout

\begin_layout Description
epstol .
 .
 .
 .
 .
 .
 tolerance for hybrid method (not used) 
\end_layout

\end_deeper
\begin_layout Description
Output\InsetSpace ~
Step\InsetSpace ~
Card 
\emph on
nsdprt nsvprt nstprt nsmprt 
\end_layout

\begin_deeper
\begin_layout Description
nsdprt .
 .
 .
 .
 .
 .
 steps between disk output 
\end_layout

\begin_layout Description
nsvprt .
 .
 .
 .
 .
 .
 steps between velocity output (not used) 
\end_layout

\begin_layout Description
nstprt .
 .
 .
 .
 .
 .
 steps between temperature output 
\end_layout

\begin_layout Description
nsmprt .
 .
 .
 .
 .
 .
 steps between mean field output (not used) 
\end_layout

\end_deeper
\begin_layout Description
Velocity\InsetSpace ~
Boundary\InsetSpace ~
Condition\InsetSpace ~
Flag\InsetSpace ~
Cards 
\emph on
bnode enode incr (bcf(i), i=1,ndof) 
\end_layout

\begin_deeper
\begin_layout Description
bnode .
 .
 .
 .
 .
 .
 beginning node 
\end_layout

\begin_layout Description
enode .
 .
 .
 .
 .
 .
 ending node 
\end_layout

\begin_layout Description
incr .
 .
 .
 .
 .
 .
 .
 node increment 
\end_layout

\begin_layout Description
bcf(i) .
 .
 .
 .
 .
 .
 .
 boundary condition flag for ith degree of freedom 
\end_layout

\begin_deeper
\begin_layout Standard
0 - free slip 
\end_layout

\begin_layout Standard
1 - pinned degree of freedom 
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard

\emph on
0 0 0 0 0 to end VBCF cards 
\end_layout

\begin_layout Description
Temperature\InsetSpace ~
Boundary\InsetSpace ~
Condition\InsetSpace ~
Flag\InsetSpace ~
Cards 
\emph on
bnode enode incr bcf 
\end_layout

\begin_deeper
\begin_layout Description
bnode .
 .
 .
 .
 .
 .
 beginning node 
\end_layout

\begin_layout Description
enode .
 .
 .
 .
 .
 .
 ending node 
\end_layout

\begin_layout Description
incr .
 .
 .
 .
 .
 .
 .
 node increment 
\end_layout

\begin_layout Description
bcf .
 .
 .
 .
 .
 .
 .
 .
 boundary condition flag for temperature 
\end_layout

\begin_deeper
\begin_layout Standard
1- fixed temperature 
\end_layout

\end_deeper
\begin_layout Standard

\emph on
0 0 0 0 to end TBCF cards 
\end_layout

\end_deeper
\begin_layout Description
Nusselt\InsetSpace ~
Number\InsetSpace ~
Boundary\InsetSpace ~
Condition\InsetSpace ~
Flag\InsetSpace ~
Cards\InsetSpace ~
-\InsetSpace ~
Edge\InsetSpace ~
Nodes top and bottom rows of
 nodes 
\emph on
bnode enode incr 
\end_layout

\begin_deeper
\begin_layout Description
bnode .
 .
 .
 .
 .
 .
 beginning node 
\end_layout

\begin_layout Description
enode .
 .
 .
 .
 .
 .
 ending node 
\end_layout

\begin_layout Description
incr .
 .
 .
 .
 .
 .
 .
 node increment 
\end_layout

\begin_layout Standard

\emph on
0 0 0 to end NNBCF (type a) cards
\end_layout

\end_deeper
\begin_layout Description
Nusselt\InsetSpace ~
Number\InsetSpace ~
Boundary\InsetSpace ~
Condition\InsetSpace ~
Flag\InsetSpace ~
Cards\InsetSpace ~
-\InsetSpace ~
Second\InsetSpace ~
Row\InsetSpace ~
Nodes second from top and
 bottom rows of nodes 
\emph on
bnode enode incr 
\end_layout

\begin_deeper
\begin_layout Description
bnode .
 .
 .
 .
 .
 .
 beginning node 
\end_layout

\begin_layout Description
enode .
 .
 .
 .
 .
 .
 ending node 
\end_layout

\begin_layout Description
incr .
 .
 .
 .
 .
 .
 .
 node increment 
\end_layout

\begin_layout Standard

\emph on
0 0 0 to end NNBCF (type b) cards
\emph default
 
\end_layout

\end_deeper
\begin_layout Description
Initial\InsetSpace ~
Temperature\InsetSpace ~
Card 
\emph on
pert xsize zsize
\emph default
 
\end_layout

\begin_deeper
\begin_layout Description
pert .
 .
 .
 .
 .
 .
 .
 perturbation from conductive state 
\end_layout

\begin_layout Description
xsize .
 .
 .
 .
 .
 .
 .
 nondimensional length (x1 direction) of box 
\end_layout

\begin_layout Description
zsize .
 .
 .
 .
 .
 .
 .
 nondimensional height (x2 direction) of box 
\end_layout

\end_deeper
\begin_layout Description
Element\InsetSpace ~
Parameter\InsetSpace ~
Cards - numeg cards 
\emph on
ntype numel nen nenl numat nedof numsuf nipt implv implt 
\end_layout

\begin_deeper
\begin_layout Description
ntype .
 .
 .
 .
 .
 .
 .
 element type 
\end_layout

\begin_deeper
\begin_layout Standard
2 - two dimensional elements 
\end_layout

\begin_layout Standard
3 - three dimensional elements 
\end_layout

\end_deeper
\begin_layout Description
numel .
 .
 .
 .
 .
 .
 total number of elements 
\end_layout

\begin_layout Description
nen .
 .
 .
 .
 .
 .
 .
 .
 number of element nodes 
\end_layout

\begin_layout Description
nenl .
 .
 .
 .
 .
 .
 .
 number of local element nodes
\end_layout

\begin_layout Description
numat .
 .
 .
 .
 .
 .
 number of material groups 
\end_layout

\begin_layout Description
nedof .
 .
 .
 .
 .
 .
 .
 number of element degrees of freedom 
\end_layout

\begin_layout Description
numsuf .
 .
 .
 .
 .
 .
 number of surface force flux cards 
\end_layout

\begin_layout Description
nipt .
 .
 .
 .
 .
 .
 .
 number of integration points per element 
\end_layout

\begin_layout Description
implv .
 .
 .
 .
 .
 .
 .
 currently unused 
\end_layout

\begin_layout Description
implt .
 .
 .
 .
 .
 .
 .
 currently unused 
\end_layout

\end_deeper
\begin_layout Description
Viscosity\InsetSpace ~
Card 
\emph on
visc(i), i=1,numat 
\end_layout

\begin_deeper
\begin_layout Description
visc(i) .
 .
 .
 .
 .
 .
 preexponential viscosity coefficient for ith element 
\end_layout

\end_deeper
\begin_layout Description
Penalty\InsetSpace ~
Card 
\emph on
alam(i), i=1,numat 
\end_layout

\begin_deeper
\begin_layout Description
alam(i) .
 .
 .
 .
 .
 .
 penalty parameter for ith element 
\end_layout

\end_deeper
\begin_layout Description
Diffusivity\InsetSpace ~
Card 
\emph on
diff(i), i=1,numat
\emph default
 
\end_layout

\begin_deeper
\begin_layout Description
diff(i) .
 .
 .
 .
 .
 .
 .
 thermal diffusivity for ith element 
\end_layout

\end_deeper
\begin_layout Description
Buoyancy\InsetSpace ~
Rayleigh\InsetSpace ~
Number\InsetSpace ~
Card 
\emph on
Ra(i), i=1,numat 
\end_layout

\begin_deeper
\begin_layout Description
Ra(i) .
 .
 .
 .
 .
 .
 .
 bouyancy part of Rayleigh number for ith element 
\end_layout

\end_deeper
\begin_layout Description
Internal\InsetSpace ~
Heating\InsetSpace ~
Parameter\InsetSpace ~
Card 
\emph on
dmhu(i), i=1,numat 
\end_layout

\begin_deeper
\begin_layout Description
dmhu(i) .
 .
 .
 .
 .
 .
 internal heat source for ith material group
\end_layout

\end_deeper
\begin_layout Description
Activation\InsetSpace ~
Energy\InsetSpace ~
Card 
\emph on
tcon(1,i), i=1,numat
\emph default
 
\end_layout

\begin_deeper
\begin_layout Description
tcon(1,i) .
 .
 .
 .
 .
 nondimensional activation energy for ith material group for temperature
 dependent viscosity 
\end_layout

\end_deeper
\begin_layout Description
Temperature\InsetSpace ~
Dependent\InsetSpace ~
Viscosity\InsetSpace ~
Temperature\InsetSpace ~
Offset\InsetSpace ~
Card 
\emph on
tcon(2,i), i=1,numat
\emph default
 
\end_layout

\begin_deeper
\begin_layout Description
tcon(2,i) .
 .
 .
 .
 .
 nondimen temperature offset for ith material group for temperature dependent
 viscosity 
\end_layout

\end_deeper
\begin_layout Description
Surface\InsetSpace ~
Force/Flux\InsetSpace ~
Cards - numsuf cards 
\emph on
nel side fnorm ftan flux 
\end_layout

\begin_deeper
\begin_layout Description
nel .
 .
 .
 .
 .
 .
 .
 .
 element number 
\end_layout

\begin_layout Description
side .
 .
 .
 .
 .
 .
 .
 side to apply force and flux 
\end_layout

\begin_deeper
\begin_layout Standard
1 - bottom 
\end_layout

\begin_layout Standard
2 - right side 
\end_layout

\begin_layout Standard
3 - top 
\end_layout

\begin_layout Standard
4 - left side 
\end_layout

\end_deeper
\begin_layout Description
fnorm .
 .
 .
 .
 .
 .
 .
 normal surface force 
\end_layout

\begin_layout Description
ftan .
 .
 .
 .
 .
 .
 .
 tangential surface force 
\end_layout

\begin_layout Description
flux .
 .
 .
 .
 .
 .
 .
 .
 heat flux
\end_layout

\end_deeper
\begin_layout Standard
The following four groups of cards are read from the 
\series bold
igeom
\series default
 unit.
 These constitute the geometry part of the input ``deck'' for the program
 
\family typewriter
conman
\family default
.
 The format of this section is the same as above.
\end_layout

\begin_layout Subsection
Coordinate Group 
\end_layout

\begin_layout Standard
Absolute Coordinate Card node gp (x(i,node) i=1,nsd) node .
 .
 .
 .
 .
 .
 .
 the node whose coordinates are to be specified gp .
 .
 .
 .
 .
 .
 .
 .
 generation parameter for automatic generation 0 - no autogeneration 2 -
 generate a line using node as a starting point 4 - generate a box using
 node as the lower left corner x(i,node) .
 .
 .
 .
 .
 coordinate value in the ith spatial dimension Corner Generation Cards -
 gp-1 cards node mgen (x(i,node) i=1,nsd) node .
 .
 .
 .
 .
 .
 .
 node number mgen .
 .
 .
 .
 .
 .
 .
 generation parameter 0 - don’t use this as the start of a generation sequence
 1 - use this as the start of a generation sequence x(i,node) .
 .
 .
 .
 .
 coordinate value in the ith spatial dimension Generation Increment Card
 ninc1 inc1 ninc2 inc2 ninc1 .
 .
 .
 .
 .
 .
 .
 number of additional nodes to generate in x1 direction inc1 .
 .
 .
 .
 .
 .
 .
 increment of nodes in x1 direction ninc2 .
 .
 .
 .
 .
 .
 .
 number of additional nodes to generate in x2 direction 0 - if gp equals
 2 inc2 .
 .
 .
 .
 .
 .
 .
 increment of nodes in x2 direction 0 - if gp equals 2 0 0 0 0 to end coordinate
 group
\end_layout

\begin_layout Standard
Velocity Boundary Condition Group Absolute Velocity Card node gp (v(i,node)
 i=1,nsd) node .
 .
 .
 .
 .
 .
 .
 the node whose velocities are to be specified gp .
 .
 .
 .
 .
 .
 .
 .
 generation parameter for automatic generation 0 - no autogeneration 2 -
 generate a line using node as a starting point 4 - generate a box using
 node as the lower left corner v(i,node) .
 .
 .
 .
 .
 velocity value in the ith spatial dimension Corner Generation Cards - gp-1
 cards node mgen (v(i,node) i=1,nsd) node .
 .
 .
 .
 .
 .
 .
 node number mgen .
 .
 .
 .
 .
 .
 .
 generation parameter 0 - don’t use this as the start of a generation sequence
 1 - use this as the start of a generation sequence v(i,node) .
 .
 .
 .
 .
 velocity value in the ith spatial dimension Generation Increment Card ninc1
 inc1 ninc2 inc2 ninc1 .
 .
 .
 .
 .
 .
 .
 number of additional nodes to generate in x1 direction inc1 .
 .
 .
 .
 .
 .
 .
 increment of nodes in x1 direction ninc2 .
 .
 .
 .
 .
 .
 .
 number of additional nodes to generate in x2 direction 0 - if gp equals
 2 inc2 .
 .
 .
 .
 .
 .
 .
 increment of nodes in x2 direction 0 - if gp equals 2 0 0 0 0 to end velocity
 group
\end_layout

\begin_layout Standard
Temperature Boundary Condition Group Absolute Temperature Card node gp t(node)
 node .
 .
 .
 .
 .
 .
 .
 the node whose velocities are to be specified gp .
 .
 .
 .
 .
 .
 .
 .
 generation parameter for automatic generation 0 - no autogeneration 2 -
 generate a line using node as a starting point t(node) .
 .
 .
 .
 .
 .
 temperature value Corner Generation Cards - gp-1 cards node mgen t(node)
 node .
 .
 .
 .
 .
 .
 .
 node number mgen .
 .
 .
 .
 .
 .
 .
 generation parameter 0 - don’t use this as the start of a generation sequence
 1 - use this as the start of a generation sequence t(node) .
 .
 .
 .
 .
 .
 temperature value Generation Increment Card ninc1 inc1 ninc2 inc2 ninc1
 .
 .
 .
 .
 .
 .
 .
 number of additional nodes to generate in x1 direction inc1 .
 .
 .
 .
 .
 .
 .
 increment of nodes in x1 direction ninc2 .
 .
 .
 .
 .
 .
 .
 number of additional nodes to generate in x2 direction 0 - if gp equals
 2 inc2 .
 .
 .
 .
 .
 .
 .
 increment of nodes in x2 direction 0 - if gp equals 2 0 0 to end temperature
 group
\end_layout

\begin_layout Standard
Element Connectivity (ien) Generation Group Absolution Element Card elnu
 ng mat no (ien(elnu,i) i=1,nen) elnu .
 .
 .
 .
 .
 .
 .
 element number ng .
 .
 .
 .
 .
 .
 .
 .
 generation parameter 0 - no generation 1 - generate using increments from
 increment card mat no .
 .
 .
 .
 .
 .
 material number for this element ien(elnu,i) .
 .
 .
 .
 .
 global node number for the ith local node of element counterclockwise from
 lower left corner Increment Card nel1 incel1 incn1 nel2 incel2 incn2 nel1
 .
 .
 .
 .
 .
 .
 .
 number of elements in x1 (horizontal) direction incel1 .
 .
 .
 .
 .
 .
 .
 increment of elements in x1 (horizontal) direction incn1 .
 .
 .
 .
 .
 .
 .
 increment of nodes in x1 (horizontal) direction nel2 .
 .
 .
 .
 .
 .
 .
 number of elements in x2 (vertical) direction incel2 .
 .
 .
 .
 .
 .
 .
 increment of elements in x2 (vertical) direction incn2 .
 .
 .
 .
 .
 .
 .
 increment of nodes in x2 (vertical) direction 0 0 0 0 0 0 to end element
 connectivity group
\end_layout

\begin_layout Standard
Sample Input Files The lins below are a sample 32 element by 32 element
 input deck for a 1 by 1 square.
 32 by 32 element input deck 1089 2 2 32 32 1 1 0 0 1 66 1 1 1 1 0 50 2
 0.5 0.0005 0.000001 50 50 50 50 1 1057 33 0 1 1057 1089 1 1 0 1 33 1 1 0 33
 1089 33 0 1 1 1 1 1 1 33 33 1 1 1 1057 1057 1 1 1 1089 1089 1 1 1 0 0 0
 0 0 1 1057 33 1 33 1089 33 1 0 0 0 0 1 1057 33 33 1089 33 0 0 0 2 1058
 33 32 1088 33 0 0 0 0.001 1.0 1.0 2 1024 4 4 1 2 0 5 0 0 1.0 1.0e07 1.0 77927.0
 0.0 0.0 0.0 0.0
\end_layout

\begin_layout Standard
The lines below are a sample geometry file for the 32 by 32 element problem.
 1 4 0.0 0.0 1057 1 1.0 0.0 1089 1 1.0 1.0 33 1 0.0 1.0 32 33 32 1 0 0 0.0 0.0 0 0
 0.0 0.0 1 2 1.0 1057 0 1.0 32 33 0 0 0.0 0.0 1 1 1 1 34 35 2 32 1 33 32 32 1
 0 0 0 0 0 0 0
\end_layout

\begin_layout Chapter
License 
\end_layout

\begin_layout Standard

\series bold
GNU GENERAL PUBLIC LICENSE Version 2, June 1991.
 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
\series default
 
\newline

\series medium
Everyone is permitted to copy and distribute verbatim copies of this license
 document, but changing it is not allowed.
\end_layout

\begin_layout Section*
Preamble
\end_layout

\begin_layout Standard
The licenses for most software are designed to take away your freedom to
 share and change it.
 By contrast, the GNU General Public License is intended to guarantee your
 freedom to share and change free software -- to make sure the software
 is free for all its users.
 This General Public License applies to most of the Free Software Foundation's
 software and to any other program whose authors commit to using it.
 (Some other Free Software Foundation software is covered by the GNU Library
 General Public License instead.) You can apply it to your programs, too.
\end_layout

\begin_layout Standard
When we speak of free software, we are referring to freedom, not price.
 Our General Public Licenses are designed to make sure that you have the
 freedom to distribute copies of free software (and charge for this service
 if you wish), that you receive source code or can get it if you want it,
 that you can change the software or use pieces of it in new free programs;
 and that you know you can do these things.
\end_layout

\begin_layout Standard
To protect your rights, we need to make restrictions that forbid anyone
 to deny you these rights or to ask you to surrender the rights.
 These restrictions translate to certain responsibilities for you if you
 distribute copies of the software, or if you modify it.
\end_layout

\begin_layout Standard
For example, if you distribute copies of such a program, whether gratis
 or for a fee, you must give the recipients all the rights that you have.
 You must make sure that they, too, receive or can get the source code.
 And you must show them these terms so they know their rights.
\end_layout

\begin_layout Standard
We protect your rights with two steps:
\end_layout

\begin_layout Enumerate
Copyright the software, and 
\end_layout

\begin_layout Enumerate
Offer you this license which gives you legal permission to copy, distribute
 and/or modify the software.
\end_layout

\begin_layout Standard
Also, for each author's protection and ours, we want to make certain that
 everyone understands that there is no warranty for this free software.
 If the software is modified by someone else and passed on, we want its
 recipients to know that what they have is not the original, so that any
 problems introduced by others will not reflect on the original authors'
 reputations.
\end_layout

\begin_layout Standard
Finally, any free program is threatened constantly by software patents.
 We wish to avoid the danger that redistributors of a free program will
 individually obtain patent licenses, in effect making the program proprietary.
 To prevent this, we have made it clear that any patent must be licensed
 for everyone's free use or not licensed at all.
 
\end_layout

\begin_layout Standard
The precise terms and conditions for copying, distribution and modification
 follow.
\end_layout

\begin_layout Section*
GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION
 AND MODIFICATION 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
item[0.]
\end_layout

\end_inset

This License applies to any program or other work which contains a notice
 placed by the copyright holder saying it may be distributed under the terms
 of this General Public License.
 The "Program" below refers to any such program or work, and a "work based
 on the Program" means either the Program or any derivative work under copyright
 law: that is to say, a work containing the Program or a portion of it,
 either verbatim or with modifications and/or translated into another language.
 (Hereinafter, translation is included without limitation in the term "modificat
ion.") Each licensee is addressed as "you."
\newline

\newline
Activities other than copying,
 distribution and modification are not covered by this License; they are
 outside its scope.
 The act of running the Program is not restricted, and the output from the
 Program is covered only if its contents constitute a work based on the
 Program (independent of having been made by running the Program).
 Whether that is true depends on what the Program does.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
You may copy and distribute verbatim copies of the Program's source code
 as you receive it, in any medium, provided that you conspicuously and appropria
tely publish on each copy an appropriate copyright notice and disclaimer
 of warranty; keep intact all the notices that refer to this License and
 to the absence of any warranty; and give any other recipients of the Program
 a copy of this License along with the Program.
 
\end_layout

\begin_deeper
\begin_layout Standard
You may charge a fee for the physical act of transferring a copy, and you
 may at your option offer warranty protection in exchange for a fee.
 
\end_layout

\end_deeper
\begin_layout Enumerate
You may modify your copy or copies of the Program or any portion of it,
 thus forming a work based on the Program, and copy and distribute such
 modifications or work under the terms of Section 1 above, provided that
 you also meet all of these conditions: 
\end_layout

\begin_deeper
\begin_layout Enumerate
You must cause the modified files to carry prominent notices stating that
 you changed the files and the date of any change.
 
\end_layout

\begin_layout Enumerate
You must cause any work that you distribute or publish, that in whole or
 in part contains or is derived from the Program or any part thereof, to
 be licensed as a whole at no charge to all third parties under the terms
 of this License.
 
\end_layout

\begin_layout Enumerate
If the modified program normally reads commands interactively when run,
 you must cause it, when started running for such interactive use in the
 most ordinary way, to print or display an announcement including an appropriate
 copyright notice and a notice that there is no warranty (or else, saying
 that you provide a warranty) and that users may redistribute the program
 under these conditions, and telling the user how to view a copy of this
 License.
 (Exception: if the Program itself is interactive but does not normally
 print such an announcement, your work based on the Program is not required
 to print an announcement.) 
\end_layout

\begin_layout Standard
These requirements apply to the modified work as a whole.
 If identifiable sections of that work are not derived from the Program,
 and can be reasonably considered independent and separate works in themselves,
 then this License, and its terms, do not apply to those sections when you
 distribute them as separate works.
 But when you distribute the same sections as part of a whole which is a
 work based on the Program, the distribution of the whole must be on the
 terms of this License, whose permissions for other licensees extend to
 the entire whole, and thus to each and every part regardless of who wrote
 it.
 
\end_layout

\begin_layout Standard
Thus, it is not the intent of this section to claim rights or contest your
 rights to work written entirely by you; rather, the intent is to exercise
 the right to control the distribution of derivative or collective works
 based on the Program.
 
\end_layout

\begin_layout Standard
In addition, mere aggregation of another work not based on the Program with
 the Program (or with a work based on the Program) on a volume of a storage
 or distribution medium does not bring the other work under the scope of
 this License.
 
\end_layout

\end_deeper
\begin_layout Enumerate
You may copy and distribute the Program (or a work based on it, under Section
 2) in object code or executable form under the terms of Sections 1 and
 2 above provided that you also do one of the following: 
\end_layout

\begin_deeper
\begin_layout Enumerate
Accompany it with the complete corresponding machine-readable source code,
 which must be distributed under the terms of Sections 1 and 2 above on
 a medium customarily used for software interchange; or, 
\end_layout

\begin_layout Enumerate
Accompany it with a written offer, valid for at least three years, to give
 any third party, for a charge no more than your cost of physically performing
 source distribution, a complete machine-readable copy of the corresponding
 source code, to be distributed under the terms of Sections 1 and 2 above
 on a medium customarily used for software interchange; or, 
\end_layout

\begin_layout Enumerate
Accompany it with the information you received as to the offer to distribute
 corresponding source code.
 (This alternative is allowed only for noncommercial distribution and only
 if you received the program in object code or executable form with such
 an offer, in accord with Subsection b above.) 
\end_layout

\begin_layout Standard
The source code for a work means the preferred form of the work for making
 modifications to it.
 For an executable work, complete source code means all the source code
 for all modules it contains, plus any associated interface definition files,
 plus the scripts used to control compilation and installation of the executable.
 However, as a special exception, the source code distributed need not include
 anything that is normally distributed (in either source or binary form)
 with the major components (compiler, kernel, and so on) of the operating
 system on which the executable runs, unless that component itself accompanies
 the executable.
\end_layout

\begin_layout Standard
If distribution of executable or object code is made by offering access
 to copy from a designated place, then offering equivalent access to copy
 the source code from the same place counts as distribution of the source
 code, even though third parties are not compelled to copy the source along
 with the object code.
 
\end_layout

\end_deeper
\begin_layout Enumerate
You may not copy, modify, sublicense, or distribute the Program except as
 expressly provided under this License.
 Any attempt otherwise to copy, modify, sublicense or distribute the Program
 is void, and will automatically terminate your rights under this License.
 However, parties who have received copies, or rights, from you under this
 License will not have their licenses terminated so long as such parties
 remain in full compliance.
 
\end_layout

\begin_layout Enumerate
You are not required to accept this License, since you have not signed it.
 However, nothing else grants you permission to modify or distribute the
 Program or its derivative works.
 These actions are prohibited by law if you do not accept this License.
 Therefore, by modifying or distributing the Program (or any work based
 on the Program), you indicate your acceptance of this License to do so,
 and all its terms and conditions for copying, distributing or modifying
 the Program or works based on it.
 
\end_layout

\begin_layout Enumerate
Each time you redistribute the Program (or any work based on the Program),
 the recipient automatically receives a license from the original licensor
 to copy, distribute or modify the Program subject to these terms and conditions.
 You may not impose any further restrictions on the recipients' exercise
 of the rights granted herein.
 You are not responsible for enforcing compliance by third parties to this
 License.
 
\end_layout

\begin_layout Enumerate
If, as a consequence of a court judgment or allegation of patent infringement
 or for any other reason (not limited to patent issues), conditions are
 imposed on you (whether by court order, agreement or otherwise) that contradict
 the conditions of this License, they do not excuse you from the conditions
 of this License.
 If you cannot distribute so as to satisfy simultaneously your obligations
 under this License and any other pertinent obligations, then as a consequence
 you may not distribute the Program at all.
 For example, if a patent license would not permit royalty-free redistribution
 of the Program by all those who receive copies directly or indirectly through
 you, then the only way you could satisfy both it and this License would
 be to refrain entirely from distribution of the Program.
\end_layout

\begin_deeper
\begin_layout Standard
If any portion of this section is held invalid or unenforceable under any
 particular circumstance, the balance of the section is intended to apply
 and the section as a whole is intended to apply in other circumstances.
\end_layout

\begin_layout Standard
It is not the purpose of this section to induce you to infringe any patents
 or other property right claims or to contest validity of any such claims;
 this section has the sole purpose of protecting the integrity of the free
 software distribution system, which is implemented by public license practices.
 Many people have made generous contributions to the wide range of software
 distributed through that system in reliance on consistent application of
 that system; it is up to the author/donor to decide if he or she is willing
 to distribute software through any other system and a licensee cannot impose
 that choice.
 
\end_layout

\begin_layout Standard
This section is intended to make thoroughly clear what is believed to be
 a consequence of the rest of this License.
 
\end_layout

\end_deeper
\begin_layout Enumerate
If the distribution and/or use of the Program is restricted in certain countries
 either by patents or by copyrighted interfaces, the original copyright
 holder who places the Program under this License may add an explicit geographic
al distribution limitation excluding those countries, so that distribution
 is permitted only in or among countries not thus excluded.
 In such case, this License incorporates the limitation as if written in
 the body of this License.
 
\end_layout

\begin_layout Enumerate
The Free Software Foundation may publish revised and/or new versions of
 the General Public License from time to time.
 Such new versions will be similar in spirit to the present version, but
 may differ in detail to address new problems or concerns.
 
\end_layout

\begin_deeper
\begin_layout Standard
Each version is given a distinguishing version number.
 If the Program specifies a version number of this License which applies
 to it and "any later version," you have the option of following the terms
 and conditions either of that version or of any later version published
 by the Free Software Foundation.
 If the Program does not specify a version number of this License, you may
 choose any version ever published by the Free Software Foundation.
\end_layout

\end_deeper
\begin_layout Enumerate
If you wish to incorporate parts of the Program into other free programs
 whose distribution conditions are different, write to the author to ask
 for permission.
 For software which is copyrighted by the Free Software Foundation, write
 to the Free Software Foundation; we sometimes make exceptions for this.
 Our decision will be guided by the two goals of preserving the free status
 of all derivatives of our free software and of promoting the sharing and
 reuse of software generally.
 
\end_layout

\begin_layout Subsection*
NO WARRANTY 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
item[11.]
\end_layout

\end_inset

BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR
 THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
 EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
 PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
 EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH
 YOU.
 SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
 SERVICING, REPAIR OR CORRECTION.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
item[12.]
\end_layout

\end_inset

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL
 ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE
 THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING
 ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF
 THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
 THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
 EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY
 OF SUCH DAMAGES.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
END OF TERMS AND CONDITIONS 
\end_layout

\begin_layout Subsection*
How to Apply These Terms to Your New Programs
\end_layout

\begin_layout Standard
If you develop a new program, and you want it to be of the greatest possible
 use to the public, the best way to achieve this is to make it free software
 which everyone can redistribute and change under these terms.
 
\end_layout

\begin_layout Standard
To do so, attach the following notices to the program.
 It is safest to attach them to the start of each source file to most effectivel
y convey the exclusion of warranty; and each file should have at least the
 "copyright" line and a pointer to where the full notice is found.
 For example:
\end_layout

\begin_layout Quote
One line to give the program's name and a brief idea of what it does.
 Copyright 
\size footnotesize
© (
\size default
year) (name of author) 
\end_layout

\begin_layout Quote
This program is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the Free
 Software Foundation; either version 2 of the License, or (at your option)
 any later version.
 
\end_layout

\begin_layout Quote
This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
 
\end_layout

\begin_layout Quote
You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
\end_layout

\begin_layout Standard
Also add information on how to contact you by electronic and paper mail.
 
\end_layout

\begin_layout Standard
If the program is interactive, make it output a short notice like this when
 it starts in an interactive mode: 
\end_layout

\begin_layout Quote
Gnomovision version 69, Copyright © year name of author Gnomovision comes
 with ABSOLUTELY NO WARRANTY; for details type `show w'.
 This is free software, and you are welcome to redistribute it under certain
 conditions; type `show c' for details.
 
\end_layout

\begin_layout Standard
The hypothetical commands `show w' and `show c' should show the appropriate
 parts of the General Public License.
 Of course, the commands you use may be called something other than `show
 w' and `show c'; they could even be mouse-clicks or menu items -- whatever
 suits your program.
 
\end_layout

\begin_layout Standard
You should also get your employer (if you work as a programmer) or your
 school, if any, to sign a "copyright disclaimer" for the program, if necessary.
 Here is a sample; alter the names: 
\end_layout

\begin_layout Quote
Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovisi
on' (which makes passes at compilers) written by James Hacker.
 
\end_layout

\begin_layout Quote
(signature of Ty Coon)
\newline
1 April 1989 
\newline
Ty Coon, President of Vice 
\end_layout

\begin_layout Standard
This General Public License does not permit incorporating your program into
 proprietary programs.
 If your program is a subroutine library, you may consider it more useful
 to permit linking proprietary applications with the library.
 If this is what you want to do, use the GNU Library General Public License
 instead of this License.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "1"
key "Brooks 1981"

\end_inset

Brooks, A., 1981.
 A Petrov-Galerkin finite-element formulation for convection dominated flows.
 Ph.d.
 Thesis, California Institute of Technology, Pasadena, Ca.
 
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "2"
key "Brooks and Hughes"

\end_inset

Brooks, A.
 N.
 and Hughes, T.
 J.
 R., 1982.
 Streamline upwind/Petrov-Galerkin formulatins for convection dominated
 flows with particular emphasis on the inpompressible Navier-Stokes equations.
 Comp.
 Meth.
 in Appl.
 Mech.
 and Eng., 32, 199-259.
 
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "3"
key "Hughes 1987"

\end_inset

Hughes, T.J.R., 1987.
 The finite element method.
 Prentice-Hall, Inc., Englewood Cliffs, New Jersey 
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "4"
key "Hughes and Brooks 1987"

\end_inset

Hughes, T.J.R.
 and Brookes, A.
 N., 1987.
 A multi-dimensional upwind scheme with no crosswind diffusion.
 In: Finite element methods for convection dominated flows.
 ASME, New York, 34:19-35.
 
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "5"
key "Hughes et al 1988"

\end_inset

Hughes, T.J.R., Franca, L.
 P., Hulbert, G.
 M., Johan, Z., and Shakib, F., 1988.
 The Galerkin/least-squares method for advective-diffusive equations.
 In: Recent developments in computational fluid dynamics.
 T.
 E.
 Tezduyar (Editor), ASME, New York, 95:75-99.
 
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "6"
key "Hughes et al 1979"

\end_inset

Hughes, T.J.R., Liu, W.
 K., and Brooks, A.
 N., 1979.
 Finite element analysis of incompressible viscous flows by the penalty
 function formulation.
 J.
 Comput.
 Phys., 30: 19-35.
 
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "7"
key "Malkus and Hughes 1978"

\end_inset

Malkus, D.
 S.
 and Hughes, T.
 J.
 R., 1978.
 Mixed finite element methods reduced and selective integration techniques:
 a unification of concepts.
 Comp.
 Meth.
 in Appl.
 Mech.
 and Eng., 15, 63-81.
 
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "8"
key "Temam 1977"

\end_inset

Temam, R., 1977.
 Navier-Stokes equations: therory and numerical analysis.
 North-Holland.
 Amsterdam.
 
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "9"
key "Travis et al 1991"

\end_inset

Travis, B.
 J., C.
 Anderson, J.
 Baumgardner, C.
 Gable, B.
 H.
 Hager, P.
 Olson, R.
 J.
 O’Connell, A.
 Raefsky, and G.
 Schubert, 1991.
 A benchmark comparison of numerical methods for infinite Prandtl number
 convection in two-dimensional Cartesian geometry, Geophys.
 Astrophys.
 Fluid Dynamics, in press.
\end_layout

\end_body
\end_document
